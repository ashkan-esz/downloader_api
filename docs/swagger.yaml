openapi: "3.0.0"
info:
  title: Downloader Api
  description: <p> A webcrawler based movie/anime data provider with rest api <br/> <br/>
    <p/>
  version: 1.0.0
  contact:
    email: ashkanaz2828@gmail.com
  license:
    "name": "Apache 2.0"
    "url": 'http://www.apache.org/licenses/LICENSE-2.0.html'
"servers":
  - "url": 'https://api.movietracker.mom'
  - "url": 'http://localhost:3000'

paths:
  /users/signup:
    post:
      tags:
        - Users-Auth
      summary: Signup
      description: <p> Create account, also return `refreshToken`. <br/>
        <br/>
        put `accessToken` in each request header. <br/>
        also send `refreshToken` cookie in each request. <br/> <br/>
        for mobile phones or situations where cookies are not available, send `refreshToken` into headers and use `noCookie=true` parameter in api routes to receive it. <br/> <br/>
        api routes send code 403 when `accessToken` is invalid or out of date. (getToken again) <br/>
        api routes send code 401 when `refreshToken` is invalid or out of date or revoked. (must log in again) <br/>
        `users/getToken` route also generates new refreshToken and must replace the existing on client <br/>
        <br/>
        for web browsers <br/>
        1. Save `accessToken` into a variable. <br/>
        2. Put `accessToken` in headers for all the requests. <br/>
        3. When user `login` or `signup` you will receive `accessToken`. <br/>
        4. After some time `accessToken` will get invalid and server gives 403 error. <br/>
        5. After getting 403 error, use `getToken` api to receive new `accessToken` and replace it in client. <br/>
        6. Along with `accessToken` you receive `accessToken_expire` witch shows the time `accessToken` get invalid. <br/>
        7. It's better to watch for it before request and call `getToken` to receive new `accessToken` this way you prevent from getting 403 error. <br/>
        8. If you get 401 error, you should remove and `accessToken` and redirect user to login page. <br/>
        9. When user is logged in and closes the browser, after opening browser again `accessToken` doesn't exist, so you should call `getToken` api before calling apis. <br/>
        <br/>
        for clients without ability to use cookie, like mobile apps <br/>
        1. add `?noCookie=true` at the end of login/signup/getToken api url. <br/>
        2. Save `accessToken` and `refreshToken` into variables. <br/>
        3. `refreshToken` should be saved to client storage secretly. <br/>
        4. Put `accessToken` and `refreshToken` in headers for all the requests. <br/>
        5. When user `login` or `signup` you will get `accessToken` and `refreshToken`. <br/>
        6. After some time `accessToken` will get invalid and server gives 403 error. <br/>
        7. After getting 403 error, use `getToken` api to receive new `accessToken` and `refreshToken` and replace them in client. <br/>
        8. Along with `accessToken` you receive `accessToken_expire` witch shows the time `accessToken` get invalid. <br/>
        9. It's better to watch for it before request and call `getToken` to receive new `accessToken` this way you prevent from getting 403 error. <br/>
        10. If you get 401 error, you should remove `accessToken` and `refreshToken` redirect user to login page. <br/>
        11. When user is logged in and closes the browser, after opening browser again `accessToken` and `refreshToken` doesn't exist, so you should call `getToken` api before calling apis.
        <p/>
      operationId: users/signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                email:
                  type: string
                password:
                  type: string
                  description: at least one number and capital letter  and length in range
                confirmPassword:
                  type: string
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        201:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true

  /users/login:
    post:
      tags:
        - Users-Auth
      summary: LogIn
      description: Login account, also return `refreshToken`.
      operationId: users/login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username_email:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                  description: means user can log in with username or email address
                password:
                  type: string
                  description: at least one number and capital letter and length in range
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true

  /users/gettoken:
    put:
      tags:
        - Users-Auth
      summary: Get token
      description: Get new Tokens, also return `refreshToken`.
      operationId: users/gettoken
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
                type: object
                properties:
                  profileImages:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        size:
                          type: integer
                        thumbnail:
                          type: string
                        addDate:
                          $ref: '#/components/schemas/DateString'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/logout:
    put:
      tags:
        - Users-Auth
      summary: Logout
      description: Logout user, return __accessToken__ as empty string and also reset/remove `refreshToken` cookie if use in browser. in other environments reset `refreshToken` from client after successful logout.
      operationId: users/logout
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  accessToken:
                    type: string
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/forceLogout/{deviceId}:
    put:
      tags:
        - Users-Auth
      summary: Force Logout
      description: Logout selected device, return remaining active sessions in field __activeSessions__.
      operationId: users/forceLogout
      security:
        - accessToken: [ ]
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  activeSessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/forceLogoutAll:
    put:
      tags:
        - Users-Auth
      summary: Force Logout All
      description: force logout all session except current session, return __activeSessions__ as empty array.
      operationId: users/forceLogoutAll
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  activeSessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/myProfile:
    get:
      tags:
        - Users
      summary: My Profile
      description: Return users profile data.
      operationId: users/myProfile
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/Profile'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/editProfile:
    post:
      tags:
        - Users
      summary: Edit Profile
      description: Edit profile data.
      operationId: users/editProfile
      security:
        - accessToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                publicName:
                  type: string
                  description: other users see this in general
                  required: true
                email:
                  type: string
                  required: true
                bio:
                  type: string
                  required: true
                  description: can be empty
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/updatePassword:
    put:
      tags:
        - Users
      summary: Update Password
      description: Update User Password.
      operationId: users/updatePassword
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: at least one number and capital letter and length in range [8-50]
                newPassword:
                  type: string
                  description: at least one number and capital letter and length in range [8-50]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/activeSessions:
    get:
      tags:
        - Users
      summary: Active Sessions
      description: Return users current session and other active sections.
      operationId: users/activeSessions
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  thisDevice:
                    $ref: '#/components/schemas/Session'
                  activeSessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/sendVerifyEmail:
    get:
      tags:
        - Users
      summary: Send Verify Email
      description: <p> send an email with an activation link. the link will expire after 6 hour. <br/>
        maybe email goes to spam folder. <br/>
        limited to 2 call per minute
        <p/>
      operationId: users/sendVerifyEmail
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/verifyEmail/{token}:
    get:
      tags:
        - Users
      summary: Verify Email
      description: <p> > verify given email token. create activation link on server side. <br/>
        limited to 2 call per minute**
        <p/>
      operationId: users/verifyEmail
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        404:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/uploadProfileImage:
    post:
      tags:
        - Users
      summary: Upload Profile Image
      description: <p>
        send data as formData and don't forget to set contentType <br/>
        returns new profileImages array. <br/> <br/>
        file size limited to `1mb` and accept [`jpg`, `jpeg`, `png`] formats only, (error code 400). <br/>
        20 profile image per user, (error code 409)
        <p/>
      operationId: users/uploadProfileImage
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profileImage:
                  type: string
                  required: true
                  format: binary
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  profileImages:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        size:
                          type: integer
                        thumbnail:
                          type: string
                        addDate:
                          $ref: '#/components/schemas/DateString'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/removeProfileImage/{filename}:
    delete:
      tags:
        - Users
      summary: Remove Profile Image
      description: Returns new profileImages array
      operationId: users/removeProfileImage
      security:
        - accessToken: [ ]
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  profileImages:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        size:
                          type: integer
                        thumbnail:
                          type: string
                        addDate:
                          $ref: '#/components/schemas/DateString'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/setFavoriteGenres/{genres}:
    put:
      tags:
        - Users
      summary: Set Favorite Genres
      description: Returns new profileImages array, maximum number of genres is 6, (error code 409).
      operationId: users/setFavoriteGenres
      security:
        - accessToken: [ ]
      parameters:
        - name: genres
          in: path
          required: true
          description: Array of String joined by '-'
          example: action-sci_fi-drama
          schema:
            type: string
            description: Array of String joined by '-'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/allUserSettings:
    get:
      tags:
        - Users-Setting
      summary: Get User Settings
      description: Returns user settings for movies, downloadLinks and notifications.
      operationId: users/allUserSettings
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      movieSettings:
                        $ref: '#/components/schemas/MovieSettings'
                      downloadLinksSettings:
                        $ref: '#/components/schemas/DownloadLinksSettings'
                      notificationSettings:
                        $ref: '#/components/schemas/NotificationSettings'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/userSettings/{settingName}:
    get:
      tags:
        - Users-Setting
      summary: Get Specific User Settings
      description: Returns user settings based on __settingName__.
      operationId: users/userSetting
      security:
        - accessToken: [ ]
      parameters:
        - name: settingName
          in: path
          required: true
          schema:
            type: string
            enum: [ 'movie', 'downloadLinks', 'notification' ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/MovieSettings'
                      - $ref: '#/components/schemas/DownloadLinksSettings'
                      - $ref: '#/components/schemas/NotificationSettings'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/changeUserSettings/{settingName}:
    put:
      tags:
        - Users-Setting
      summary: Change Specific User Settings
      description: Change user settings user settings based on __settingName__.
      operationId: users/changeUserSettings
      security:
        - accessToken: [ ]
      parameters:
        - name: settingName
          in: path
          required: true
          schema:
            type: string
            enum: [ 'movie', 'downloadLinks', 'notification' ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/MovieSettings'
                    - $ref: '#/components/schemas/DownloadLinksSettings'
                    - $ref: '#/components/schemas/NotificationSettings'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/MovieSettings'
                      - $ref: '#/components/schemas/DownloadLinksSettings'
                      - $ref: '#/components/schemas/NotificationSettings'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/computeUserStats:
    put:
      tags:
        - Users-Compute
      summary: Change Specific User Settings
      description: <p>
        Returns data based on computeUserStats <br/>
        limited to 3 call per minute <br/>
        every week at 01:00 of sunday, extract favorite genres from last 500 titles from [like, save, follow, finished] movies.
        <p/>
      operationId: users/changeUserSettings
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      favoriteGenres:
                        $ref: '#/components/schemas/FavoriteGenres'
                      lastUpdate:
                        $ref: '#/components/schemas/DateString'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /utils/getMessage:
    get:
      tags:
        - Utils
      summary: Global message
      description: return the global message set by admin
      operationId: utils-getMessage
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      data:
                        $ref: '#/components/schemas/DateString'

  /utils/getApps:
    get:
      tags:
        - Utils
      summary: App Files
      description: return return apps with their data
      operationId: utils-getApps
      parameters:
        - name: appName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppData'

  /utils/checkAppUpdate/{appName}/{os}/{version}:
    get:
      tags:
        - Utils
      summary: Check App Update
      description: check app update exists, also send message
      operationId: utils-checkAppUpdate
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: os
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
            pattern: \d\d?\.\d\d?\.\d\d?
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/CheckUpdateData'

  /movies/news/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: New Movies
      description: Return recent movies (new released movies).
      operationId: movies-news
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/newsWithDate/{date}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: New Movies With Date
      description: Return recent movies (new released movies after [date]).
      operationId: movies-newsWithDate
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/updates/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Update Movies
      description: Return movies sorted by update date (movies with new episode or higher quality).
      operationId: movies-updates
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/updatesWithDate/{date}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Update Movies With Date
      description: return movies sorted by update date (movies with new episode or higher quality  after [date]).
      operationId: movies-updateWithDate
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/topsByLikes/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Tops By Likes
      description: Return movies sorted by inApp like count.
      operationId: movies-topsByLikes
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/trailers/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Trailers
      description: Return movies with new added trailer.
      operationId: movies-trailers
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/sortedMovies/{sortBase}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Sorted Movies
      description: Return movies sorted by something like 'comingSoon'.
      operationId: movies-sortedMovies
      parameters:
        - $ref: '#/components/parameters/sortBase'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/seriesOfDay/{dayNumber}/{types}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Series Of Day
      description: Return series that get release on that day.
      operationId: movies-seriesOfDay
      parameters:
        - $ref: '#/components/parameters/dayNumber'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/multiple/status/{types}/{dataLevel}/{imdbScores}/{malScores}/{count}/{page}:
    get:
      tags:
        - Movies
      summary: Multiple Movies
      description: See yourself!
      operationId: movies-multi-status
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      inTheaters:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      comingSoon:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      news:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      update:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'

  /movies/searchByID/{id}/{dataLevel}:
    get:
      tags:
        - Movies-Search
      summary: Search Movie Id
      description: Return Movie Data
      operationId: movies-searchMovieById
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/seasons_query'
        - $ref: '#/components/parameters/episodes_query'
        - $ref: '#/components/parameters/qualities_query'
        - name: embedDownloadLinksConfig
          required: false
          in: query
          description: also receive users downloadLinks config, result in slower response
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/responses/Movie_single_200'

  /movies/staff/searchByID/{id}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff By Id
      description: Return Staff Data
      operationId: movies-searchStaffById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Staff'

  /movies/characters/searchByID/{id}:
    get:
      tags:
        - Movies-Search
      summary: Search Character By Id
      description: Return Character Data
      operationId: movies-searchCharacterById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Character'

  /movies/searchMovieStaffCharacter/{title}/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search All
      description: idk!!
      operationId: movies-searchMovieStaffCharacter
      parameters:
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      movies:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      staff:
                        type: array
                        items:
                          $ref: '#/components/schemas/Staff'
                      characters:
                        type: array
                        items:
                          $ref: '#/components/schemas/Character'

  /movies/searchStaffAndCharacter/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff And Character
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchStaffAndCharacter
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      staff:
                        type: array
                        items:
                          $ref: '#/components/schemas/Staff'
                      characters:
                        type: array
                        items:
                          $ref: '#/components/schemas/Character'

  /movies/searchStaff/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchStaff
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Staff'

  /movies/searchCharacter/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Character
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchCharacter
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'

  /movies/searchMovie/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Movie
      description: ''
      operationId: movies-searchMovie
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/country_query'
        - name: title
          required: false
          in: query
          schema:
            type: string
        - name: years
          required: false
          in: query
          schema:
            type: string
            pattern: \d+-\d+
        - name: types
          required: false
          in: query
          schema:
            type: string
            #enum: ['serial', 'movie', 'anime_serial', 'anime_movie']
            example: 'serial-anime_serial'
        - name: imdbScores
          required: false
          in: query
          schema:
            type: string
            pattern: \d-\d
            default: '0-10'
        - name: malScores
          required: false
          in: query
          schema:
            type: string
            pattern: \d-\d
            default: '0-10'
        - name: numberOfSeason
          required: false
          in: query
          schema:
            type: string
            pattern: \d+(-\d+)?
            default: '0-10'
        - name: genres
          required: false
          in: query
          description: Array of String joined by '-'
          example: action-sci_fi-drama
          schema:
            type: string
            description: Array of String joined by '-'
        - name: movieLang
          required: false
          in: query
          schema:
            type: string
        - name: dubbed
          required: false
          in: query
          schema:
            type: boolean
        - name: hardSub
          required: false
          in: query
          schema:
            type: boolean
        - name: censored
          required: false
          in: query
          schema:
            type: boolean
        - name: subtitle
          required: false
          in: query
          schema:
            type: boolean
        - name: watchOnlineLink
          required: false
          in: query
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/genres/{genres}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Genres
      description: Return array of movies match with searching genres.
      operationId: movies-searchGenres
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - name: genres
          required: true
          in: path
          description: Array of String joined by '-'
          example: action-sci_fi-drama
          schema:
            type: string
            description: Array of String joined by '-'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/status/genres:
    get:
      tags:
        - Movies-Status
      summary: Status Of Genres
      description: Returns all available genres with their count.
      operationId: movies-status-genres
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        genre:
                          type: string
                        poster:
                          $ref: '#/components/schemas/Poster'
                        count:
                          type: integer

  /movies/status/movieSources:
    get:
      tags:
        - Movies-Status
      summary: Status Of Movie Sources
      description: Returns movie sources with latest url.
      operationId: movies-status-movieSources
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MovieSources'

  /movies/addUserStats/{statType}/{id}:
    put:
      tags:
        - Movies-UserStats
      summary: Add/Remove Movie/Staff/Character From List
      description: .
      operationId: movies-addUserStats
      parameters:
        - $ref: '#/components/parameters/statType'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/remove_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/userStatsList/{statType}/{dataLevel}/{page}:
    get:
      tags:
        - Movies-UserStats
      summary: User Stats List
      description: Return array of movies/staff/character.
      operationId: movies-userStatsList
      parameters:
        - $ref: '#/components/parameters/statType'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/MovieData'
                      - $ref: '#/components/schemas/Staff'
                      - $ref: '#/components/schemas/Character'

  /movies/birthday/{staffOrCharacters}/{dataLevel}/{page}:
    get:
      tags:
        - Birthday
      summary: Birthday List
      description: Return array of staff/character.
      operationId: movies-birthday
      parameters:
        - $ref: '#/components/parameters/staffOrCharacters'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/followedOnly_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Staff'
                        - $ref: '#/components/schemas/Character'

  /movies/bots/{botId}/{moviesRequestName}/{types}/{dataLevel}/{imdbScores/{malScores}:
    get:
      tags:
        - Bots
      summary: Bots Api
      description: <p>
        return movies based on the date that saved in server, send 404 error when no new movie or updates exist. <br/>
        send maximum 24 item . <br/>
        limited to 5 call per minute
        </p>
      operationId: movies-bots
      parameters:
        - $ref: '#/components/parameters/botId'
        - $ref: '#/components/parameters/moviesRequestName'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/dontUpdateServerDate_query'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/animeEnglishName:
    get:
      tags:
        - Others
      summary: Anime English Name
      description: Return english names of anime based on japanese name.
      operationId: movies-animeEnglishName
      parameters:
        - name: japaneseNames
          required: true
          in: query
          description: exmaple japaneseNames=name1&japaneseNames=name2...
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        japaneseName:
                          type: string
                        englishName:
                          type: string


security:
  - accessToken: [ ]

"components":
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    sortBase:
      name: sortBase
      required: true
      in: path
      schema:
        type: string
        enum: [ 'animeTopComingSoon', 'animeTopAiring', 'animeSeasonNow', 'animeSeasonUpcoming', 'comingSoon', 'inTheaters', 'boxOffice', 'top', 'popular' ]
        default: 'animeTopComingSoon'
    date:
      name: date
      required: true
      in: path
      schema:
        type: string
        format: date
    types:
      name: types
      required: true
      in: path
      schema:
        type: string
        default: 'serial-movie-anime_serial-anime_movie'
    dataLevel:
      name: dataLevel
      required: true
      in: path
      schema:
        allOf:
          - $ref: '#/components/schemas/DataLevels'
          - default: 'low'
    imdbScores:
      name: imdbScores
      required: true
      in: path
      schema:
        type: string
        pattern: \d-\d
        default: '0-10'
    malScores:
      name: malScores
      required: true
      in: path
      schema:
        type: string
        pattern: \d-\d
        default: '0-10'
    page:
      name: page
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    dayNumber:
      name: dayNumber
      required: true
      in: path
      schema:
        type: integer
        minimum: 0
        maximum: 6
        default: 1
    count:
      name: count
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    title:
      name: title
      required: true
      in: path
      schema:
        type: string
    statType:
      name: statType
      required: true
      in: path
      description: values with no suffix (_staff or _character) only works for movies
      schema:
        type: string
        enum: [ 'like_movie', 'dislike_movie', 'like_staff', 'dislike_staff', 'like_character', 'dislike_character', 'follow_movie', 'follow_staff', 'future_list', 'dropped', 'finished', 'save', 'score' ]
    id:
      name: id
      required: true
      in: path
      schema:
        type: string
    staffOrCharacters:
      name: staffOrCharacters
      required: true
      in: path
      schema:
        type: string
        enum: [ 'staff', 'characters' ]
        default: staff
    botId:
      name: botId
      required: true
      in: path
      schema:
        type: string
    moviesRequestName:
      name: moviesRequestName
      required: true
      in: path
      schema:
        type: string
        enum: [ 'news', 'updates', 'newsAndUpdates' ]
        default: 'news'
    remove_query:
      name: remove
      required: false
      in: query
      schema:
        type: boolean
        default: false
    followedOnly_query:
      name: followedOnly
      required: false
      in: query
      description: only works for staff
      schema:
        type: boolean
        default: false
    dontUpdateServerDate_query:
      name: dontUpdateServerDate
      required: false
      in: query
      schema:
        type: boolean
        default: false
    seasons_query:
      name: seasons
      required: false
      in: query
      schema:
        type: string
        pattern: \d+(-\d+)?
    episodes_query:
      name: episodes
      required: false
      in: query
      description: only works when dataLevel is one of ([dlink, high]) and season is single
      schema:
        type: string
        pattern: \d+(-\d+)?
    qualities_query:
      name: qualities
      required: false
      in: query
      schema:
        type: string
        example: 1080p-720p
    name_query:
      name: name
      required: false
      in: query
      schema:
        type: string
    gender_query:
      name: gender
      required: false
      in: query
      schema:
        type: string
        enum: [ 'male', 'female', 'sexless' ]
    country_query:
      name: country
      required: false
      in: query
      schema:
        type: string
    hairColor_query:
      name: hairColor
      required: false
      in: query
      schema:
        type: string
    eyeColor_query:
      name: eyeColor
      required: false
      in: query
      schema:
        type: string
    age_query:
      name: age
      required: false
      in: query
      schema:
        type: string
        pattern: \d+(-\d+)?
        example: 25-40


  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

    Movies_200:
      description: Ok
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseCode'
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MovieData'

    Movie_single_200:
      description: Ok
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseCode'
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MovieData'

  "schemas":
    Profile:
      type: object
      properties:
        _id:
          type: string
          description: act as userId
        username:
          type: string
        publicName:
          type: string
          description: other users see this in general
        email:
          type: string
        emailVerified:
          type: boolean
        bio:
          type: string
        profileImages:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              size:
                type: integer
              thumbnail:
                type: string
              addDate:
                $ref: '#/components/schemas/DateString'
        defaultProfile:
          type: string
        favoriteGenres:
          $ref: '#/components/schemas/StringArray'
        computed:
          type: object
          properties:
            favoriteGenres:
              $ref: '#/components/schemas/FavoriteGenres'
        movieSettings:
          $ref: '#/components/schemas/MovieSettings'
        downloadLinksSettings:
          $ref: '#/components/schemas/DownloadLinksSettings'
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettings'
        friends:
          type: array
        registrationDate:
          $ref: '#/components/schemas/DateString'
        role:
          type: string
          enum: [ 'test-user', 'user', 'dev', 'admin' ]
        thisDevice:
          $ref: '#/components/schemas/Session'

    FavoriteGenres:
      type: array
      items:
        type: object
        properties:
          genre:
            type: string
          count:
            type: integer
          percent:
            type: number
            format: float
          lastUpdate:
            $ref: '#/components/schemas/DateString'

    MovieSettings:
      type: object
      properties:
        includeAnime:
          type: boolean
          default: true
        includeHentai:
          type: boolean
          default: false

    DownloadLinksSettings:
      type: object
      properties:
        includeDubbed:
          type: boolean
          default: true
        includeHardSub:
          type: boolean
          default: true
        includeCensored:
          type: boolean
          default: true
        preferredQualities:
          type: array
          items:
            type: string
            enum: [ '480p', '720p', '1080p', '2160p' ]

    NotificationSettings:
      type: object
      properties:
        followMovie:
          type: boolean
          default: true
        followMovie_betterQuality:
          type: boolean
          default: true
        followMovie_subtitle:
          type: boolean
          default: true
        futureList:
          type: boolean
          default: true
        futureList_serialSeasonEnd:
          type: boolean
          default: true
        futureList_subtitle:
          type: boolean
          default: true
        finishedList_spinOffSequel:
          type: boolean
          default: true

    MovieData:
      oneOf:
        - $ref: '#/components/schemas/DataLevel_dlink'
        - $ref: '#/components/schemas/DataLevel_low'
        - $ref: '#/components/schemas/DataLevel_telbot'
        - $ref: '#/components/schemas/DataLevel_medium'
        - $ref: '#/components/schemas/DataLevel_high'
        - $ref: '#/components/schemas/DataLevel_info'

    DataLevel_dlink:
      type: object
      properties:
        _id:
          type: string
        rawTitle:
          type: string
        year:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        qualities:
          type: array
          items:
            $ref: '#/components/schemas/Quality'
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'
        subtitles:
          type: array
          items:
            $ref: '#/components/schemas/Subtitle'
        sources:
          type: array
          items:
            type: object
            properties:
              sourceName:
                type: string
              pageLink:
                type: string

    DataLevel_low:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        rawTitle:
          type: string
        year:
          type: string
        premiered:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        type:
          type: string
          enum: [ 'movie', 'serial', 'anime_movie', 'anime_serial' ]
        rating:
          $ref: '#/components/schemas/Rating'
        latestData:
          $ref: '#/components/schemas/LatestData'
        userStats:
          $ref: '#/components/schemas/UserStats'

    DataLevel_telbot:
      type: object
      properties:
        _id:
          type: string
        rawTitle:
          type: string
        type:
          type: string
          enum: [ 'movie', 'serial', 'anime_movie', 'anime_serial' ]
        year:
          type: string
        premiered:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        poster_s3:
          $ref: '#/components/schemas/Poster_s3'
        genres:
          $ref: '#/components/schemas/StringArray'
        summary:
          $ref: '#/components/schemas/Summary'
        rating:
          $ref: '#/components/schemas/Rating'
        rated:
          type: string
        country:
          type: string
        latestData:
          $ref: '#/components/schemas/LatestData'
        duration:
          type: string
          description: example '60 min'
        releaseDay:
          type: string
          description: days of week
        actorsAndCharacters:
          type: array
          items:
            $ref: '#/components/schemas/Actor_and_Character'
        staff:
          type: object
          properties:
            directors:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            writers:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            others:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
        seasonEpisode:
          type: array
          items:
            type: object
            properties:
              seasonNumber:
                type: integer
              episodes:
                type: integer
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'

    DataLevel_medium:
      allOf:
        - $ref: '#/components/schemas/DataLevel_low'
      type: object
      properties:
        releaseState:
          type: string
          enum: [ 'inTheaters', 'comingSoon', 'waiting', 'done' ]
        rank:
          $ref: '#/components/schemas/Rank'
        alternateTitles:
          $ref: '#/components/schemas/StringArray'
        summary:
          $ref: '#/components/schemas/Summary'
        genres:
          $ref: '#/components/schemas/StringArray'
        genresWithImage:
          type: array
          items:
            description: only exist in movies/searchById api
            type: object
            properties:
              genre:
                type: string
              poster:
                $ref: '#/components/schemas/Poster'
              count:
                type: integer
        trailers:
          type: array
          items:
            $ref: '#/components/schemas/Trailer'
        trailerDate:
          $ref: '#/components/schemas/DateString'
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        nextEpisode:
          $ref: '#/components/schemas/NextEpisode'
        releaseDay:
          type: string
          description: days of week
        status:
          type: string
          enum: [ 'running','ended','unknown' ]
        boxOfficeData:
          type: object
          properties:
            weekend:
              type: string
            gross:
              type: string
            weeks:
              type: integer
        userStats:
          $ref: '#/components/schemas/UserStats'

    DataLevel_high:
      allOf:
        - $ref: '#/components/schemas/DataLevel_medium'
      type: object
      properties:
        titleSynonyms:
          $ref: '#/components/schemas/StringArray'
        qualities:
          description: for movie titles check qualities and check seasons for series titles
          type: array
          items:
            $ref: '#/components/schemas/Quality'
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'
        subtitles:
          type: array
          items:
            $ref: '#/components/schemas/Subtitle'
        sources:
          type: array
          items:
            type: object
            properties:
              sourceName:
                type: string
              pageLink:
                type: string
        seasonEpisode:
          type: array
          items:
            type: object
            properties:
              seasonNumber:
                type: integer
              episodes:
                type: integer
        view:
          type: integer
        like_month:
          type: integer
        view_month:
          type: integer
        add_date:
          $ref: '#/components/schemas/DateString'
        apiUpdateDate:
          $ref: '#/components/schemas/DateString'
        castUpdateDate:
          $ref: '#/components/schemas/DateString'
        poster_s3:
          $ref: '#/components/schemas/Poster_s3'
        trailer_s3:
          $ref: '#/components/schemas/Trailer_s3'
        endYear:
          type: string
        officialSite:
          type: string
        webChannel:
          type: string
        duration:
          type: string
          description: example '60 min'
        totalDuration:
          type: string
          description: in format hh:mm example 14:11 === 14 hours and 11 min
        imdbID:
          type: string
        tvmazeID:
          type: integer
        jikanID:
          type: integer
        totalSeasons:
          type: integer
        boxOffice:
          type: string
        rated:
          type: string
        movieLang:
          type: string
        country:
          type: string
        actorsAndCharacters:
          type: array
          items:
            $ref: '#/components/schemas/Actor_and_Character'
        staff:
          type: object
          properties:
            directors:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            writers:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            others:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
        awards:
          type: string
        animeType:
          type: string
        animeSource:
          type: string
        animeSeason:
          type: string
        relatedTitles:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              jikanID:
                type: integer
              title:
                type: string
              rawTitle:
                type: string
              relation:
                type: string
                enum: [ 'Prequel', 'Sequel', 'Side Story', 'Parent Story', 'Spin-off' ]
        userStats:
          $ref: '#/components/schemas/UserStats'

    DataLevel_info:
      allOf:
        - $ref: '#/components/schemas/DataLevel_high'
      not:
        type: object
        properties:
          seasons:
            type: array
          qualities:
            type: array
          subtitles:
            type: array

    DataLevels:
      type: string
      enum: [ 'dlink', 'low', 'telbot', 'medium', 'high', 'info' ]

    LatestData:
      type: object
      properties:
        season:
          type: integer
        episode:
          type: integer
        quality:
          type: string
        updateReason:
          type: string
          enum: [ 'season', 'episode', 'quality' ]
        hardSub:
          type: string
          pattern: /S\d+E\d+/
        dubbed:
          type: string
          description: for series 's1e5' shows last episode with hardsub/dubbed/..
        subtitle:
          type: string
          description: for movies 's1e1' means hardsub/dubbed/.. exist
        censored:
          type: string
        watchOnlineLink:
          type: string

    Actor_and_Character:
      type: object
      properties:
        id:
          type: object
        name:
          type: string
        gender:
          type: string
          enum: [ 'Male', 'Female' ]
        country:
          type: string
        image:
          type: string
        thumbnail:
          type: string
        positions:
          $ref: '#/components/schemas/StringArray'
        characterData:
          type: object
          properties:
            id:
              type: object
            name:
              type: string
            gender:
              type: string
              enum: [ 'Male', 'Female' ]
            image:
              type: string
            thumbnail:
              type: string
            role:
              type: string

    UserStats:
      description: movies only
      type: object
      properties:
        like_movie:
          type: boolean
        like_movie_count:
          type: integer
        dislike_movie:
          type: boolean
        dislike_movie_count:
          type: integer
        save:
          type: boolean
        save_count:
          type: integer
        future_list:
          type: boolean
        future_list_count:
          type: integer
        #below field includes only when (dataLevel == high)
        follow_movie:
          type: boolean
        follow_movie_count:
          type: integer
        dropped:
          type: boolean
        dropped_count:
          type: integer
        finished:
          type: boolean
        finished_count:
          type: integer
        score:
          type: number
          format: float
        score_count:
          type: integer

    UserStats_staff:
      type: object
      properties:
        like_staff:
          type: boolean
        like_staff_count:
          type: integer
        dislike_staff:
          type: boolean
        dislike_staff_count:
          type: integer
        follow_staff:
          type: boolean
        follow_staff_count:
          type: integer

    UserStats_character:
      type: object
      properties:
        like_character:
          type: boolean
        like_character_count:
          type: integer
        dislike_character:
          type: boolean
        dislike_character_count:
          type: integer

    Staff:
      type: object
      properties:
        name:
          type: string
        rawName:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        about:
          type: string
        tvmazePersonID:
          type: integer
        jikanPersonID:
          type: integer
        country:
          type: string
        birthday:
          type: string
        deathday:
          type: string
        age:
          type: integer
        height:
          type: string
        weight:
          type: string
        hairColor:
          type: string
        eyeColor:
          type: string
        imageData:
          type: object
          properties:
            url:
              type: string
            originalUrl:
              type: string
            originalSize:
              type: string
            size:
              type: integer
            vpnStatus:
              $ref: '#/components/schemas/VpnStatus'
            thumbnail:
              type: string
        originalImages:
          $ref: '#/components/schemas/StringArray'
        credits:
          type: array
          items:
            type: object
            properties:
              movieID:
                type: string
              movieName:
                type: string
              movieType:
                type: string
              moviePoster:
                type: string
              movieThumbnail:
                type: string
              positions:
                $ref: '#/components/schemas/StringArray'
              characterID:
                type: string
              characterName:
                type: string
              characterRole:
                type: string
              characterImage:
                type: string
              characterThumbnail:
                type: string
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        userStats:
          $ref: '#/components/schemas/UserStats_staff'

    Character:
      type: object
      properties:
        name:
          type: string
        rawName:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        about:
          type: string
        tvmazePersonID:
          type: integer
        jikanPersonID:
          type: integer
        country:
          type: string
        birthday:
          type: string
        deathday:
          type: string
        age:
          type: integer
        height:
          type: string
        weight:
          type: string
        hairColor:
          type: string
        eyeColor:
          type: string
        imageData:
          type: object
          properties:
            url:
              type: string
            originalUrl:
              type: string
            originalSize:
              type: string
            size:
              type: integer
            vpnStatus:
              $ref: '#/components/schemas/VpnStatus'
            thumbnail:
              type: string
        originalImages:
          $ref: '#/components/schemas/StringArray'
        credits:
          type: array
          items:
            type: object
            properties:
              movieID:
                type: string
              movieName:
                type: string
              movieType:
                type: string
              moviePoster:
                type: string
              movieThumbnail:
                type: string
              role:
                type: string
              actorID:
                type: string
              actorName:
                type: string
              actorImage:
                type: string
              actorThumbnail:
                type: string
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        userStats:
          $ref: '#/components/schemas/UserStats_character'

    Genres:
      type: array
      items:
        type: object
        properties:
          genre:
            type: string
          poster:
            $ref: '#/components/schemas/Poster'
          count:
            type: integer

    MovieSources:
      type: array
      items:
        type: object
        properties:
          sourceName:
            type: string
          url:
            type: string

    MovieSource:
      type: object
      properties:
        movie_url:
          type: string
        serial_url:
          type: string
          required: false
        lastCrawlDate:
          type: string
          format: date
        crawlCycle:
          type: integer
        cookies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
              expire:
                type: integer
        disabled:
          type: boolean
        disabledDate:
          $ref: '#/components/schemas/DateString'
        addDate:
          $ref: '#/components/schemas/DateString'
        lastDomainChangeDate:
          $ref: '#/components/schemas/DateString'

    DbConfigs:
      type: object
      properties:
        corsAllowedOrigins:
          type: array
          items:
            type: string
        disableTestUserRequests:
          type: boolean
          default: false
        disableCrawlerForDuration:
          type: integer
          default: 0
        disableCrawlerStart:
          $ref: '#/components/schemas/DateString0'
        crawlerDisabled:
          type: boolean
          default: false
        disableCrawler:
          type: boolean
          default: false
        developmentFaze:
          type: boolean
          default: false
        developmentFazeStart:
          $ref: '#/components/schemas/DateString0'

    Season:
      type: object
      properties:
        seasonNumber:
          type: integer
        episodes:
          type: array
          items:
            type: object
            properties:
              episodeNumber:
                type: integer
              title:
                type: string
              released:
                type: string
              releaseStamp:
                type: string
              duration:
                type: string
              imdbRating:
                type: string
              imdbID:
                type: string
              links:
                type: array
                items:
                  type: object
                  properties:
                    link:
                      type: string
                    info:
                      type: string
                    qualitySample:
                      type: string
                    sourceName:
                      type: string
                    season:
                      type: integer
                    episode:
                      type: integer
              watchOnlineLinks:
                type: array
                items:
                  type: object
                  properties:
                    link:
                      type: string
                    info:
                      type: string
                    sourceName:
                      type: string
                    season:
                      type: integer
                    episode:
                      type: integer

    Quality:
      type: object
      properties:
        quality:
          type: string
        links:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
              qualitySample:
                type: string
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer
        watchOnlineLinks:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer

    Subtitle:
      type: object
      properties:
        seasonNumber:
          type: integer
        links:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
                description: Episodes(\d\d-\d\d) or AllEpisodesOf(Season \d\d)
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer
              direct:
                type: boolean

    Poster:
      type: object
      properties:
        url:
          type: string
        info:
          type: string
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'
        thumbnail:
          type: string

    Poster_s3:
      type: object
      properties:
        url:
          type: string
        originalUrl:
          type: string
        originalSize:
          type: integer
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'
        thumbnail:
          type: string

    Trailer:
      type: object
      properties:
        url:
          type: string
        info:
          type: string
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'

    Trailer_s3:
      type: object
      properties:
        url:
          type: string
        originalUrl:
          type: string
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'

    Rating:
      type: object
      properties:
        imdb:
          type: integer
        rottenTomatoes:
          type: integer
        metacritic:
          type: integer
        myAnimeList:
          type: integer

    Rank:
      type: object
      properties:
        animeTopComingSoon:
          type: integer
        animeTopAiring:
          type: integer
        animeSeasonNow:
          type: integer
        animeSeasonUpcoming:
          type: integer
        comingSoon:
          type: integer
        inTheaters:
          type: integer
        boxOffice:
          type: integer
        top:
          type: integer
        popular:
          type: integer

    NextEpisode:
      type: object
      properties:
        title:
          type: string
        season:
          type: integer
        episode:
          type: integer
        releaseStamp:
          type: string
        summary:
          type: string

    Summary:
      type: object
      properties:
        english:
          type: string
        english_source:
          type: string
        persian:
          type: string
        persian_source:
          type: string

    Gender:
      type: string
      enum: [ '', 'male', 'female', 'sexless' ]

    VpnStatus:
      type: string
      enum: [ 'vpnOnly', 'noVpn', 'allOK' ]

    Session:
      type: object
      properties:
        appName:
          type: string
        appVersion:
          type: string
        deviceOs:
          type: string
        deviceModel:
          type: string
        ipLocation:
          type: string
        deviceId:
          type: string
          description: unique
        loginDate:
          $ref: '#/components/schemas/DateString'
        lastUseDate:
          $ref: '#/components/schemas/DateString'

    DeviceInfo:
      type: object
      properties:
        appName:
          type: string
          required: true
          example: downloader_app
        appVersion:
          type: string
          required: true
          format: \d\d?\.\d\d?\.\d\d?
          example: 1.0.2
        os:
          type: string
          required: true
          example: IOS
        deviceModel:
          type: string
          required: true
          example: Samsung Galaxy A52

    TokensResult:
      type: object
      properties:
        accessToken:
          type: string
        accessToken_expire:
          type: integer
        username:
          type: string
        profileImages:
          $ref: '#/components/schemas/StringArray'

    DateString:
      type: string
      format: date

    DateString0:
      type: string
      format: date
      default: 0

    StringArray:
      type: array
      items:
        type: string

    ResponseCode:
      type: object
      properties:
        code:
          type: integer
        errorMessage:
          type: string
        isGuest:
          type: boolean

    AppData:
      type: object
      properties:
        appName:
          type: string
        os:
          type: string
        latestVersion:
          type: string
          pattern: \d\d?\.\d\d?\.\d\d?
        latestVersionName:
          type: string
        minVersion:
          type: string
          pattern: \d\d?\.\d\d?\.\d\d?
        versions:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
                pattern: \d\d?\.\d\d?\.\d\d?
              versionName:
                type: string
              fileData:
                type: object
                properties:
                  url:
                    type: string
                  size:
                    type: integer
                  sha256checksum:
                    type: string

    CheckUpdateData:
      type: object
      properties:
        data:
          type: object
          properties:
            hasUpdate:
              type: boolean
            isForceUpdate:
              type: boolean
            minVersion:
              type: string
              pattern: \d\d?\.\d\d?\.\d\d?
            version:
              type: string
              pattern: \d\d?\.\d\d?\.\d\d?
            versionName:
              type: string
            fileData:
              type: object
              properties:
                url:
                  type: string
                size:
                  type: integer
                sha256checksum:
                  type: string
            addDate:
              $ref: '#/components/schemas/DateString'
            message:
              type: string

    SignUpResult:
      type: object
      properties:
        accessToken:
          type: string
        accessToken_expire:
          type: integer
        username:
          type: string
        userId:
          type: string

