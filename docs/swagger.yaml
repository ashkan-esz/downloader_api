openapi: "3.0.0"
info:
  title: Downloader Api
  description: <p> A webcrawler based movie/anime data provider with rest api <br/> <br/>
    Chat service Doc -->  https://chat.movieTracker.site/swagger <br/> <br/>
    Torrent service Doc -->  https://download.movieTracker.site/swagger <br/> <br/>
    <p/>
  version: 1.0.0
  contact:
    email: ashkanaz2828@gmail.com
  license:
    "name": "Apache 2.0"
    "url": 'http://www.apache.org/licenses/LICENSE-2.0.html'
"servers":
  - "url": 'https://api.movietracker.site'
  - "url": 'http://localhost:3000'
externalDocs:
  description: --- Chat Service Doc ---
  url: https://chat.movieTracker.site/swagger

paths:
  /users/signup:
    post:
      tags:
        - Users-Auth
      summary: Signup
      description: <p> Create account, also return `refreshToken`. <br/>
        <br/>
        put `accessToken` in each request header. <br/>
        also send `refreshToken` cookie in each request. <br/> <br/>
        for mobile phones or situations where cookies are not available, send `refreshToken` into headers and use `noCookie=true` parameter in api routes to receive it. <br/> <br/>
        api routes send code 403 when `accessToken` is invalid or out of date. (getToken again) <br/>
        api routes send code 401 when `refreshToken` is invalid or out of date or revoked. (must log in again) <br/>
        `users/getToken` route also generates new refreshToken and must replace the existing on client <br/>
        <br/>
        for web browsers <br/>
        1. Save `accessToken` into a variable. <br/>
        2. Put `accessToken` in headers for all the requests. <br/>
        3. When user `login` or `signup` you will receive `accessToken`. <br/>
        4. After some time `accessToken` will get invalid and server gives 403 error. <br/>
        5. After getting 403 error, use `getToken` api to receive new `accessToken` and replace it in client. <br/>
        6. Along with `accessToken` you receive `accessToken_expire` witch shows the time `accessToken` get invalid. <br/>
        7. It's better to watch for it before request and call `getToken` to receive new `accessToken` this way you prevent from getting 403 error. <br/>
        8. If you get 401 error, you should remove and `accessToken` and redirect user to login page. <br/>
        9. When user is logged in and closes the browser, after opening browser again `accessToken` doesn't exist, so you should call `getToken` api before calling apis. <br/>
        <br/>
        for clients without ability to use cookie, like mobile apps <br/>
        1. add `?noCookie=true` at the end of login/signup/getToken api url. <br/>
        2. Save `accessToken` and `refreshToken` into variables. <br/>
        3. `refreshToken` should be saved to client storage secretly. <br/>
        4. Put `accessToken` and `refreshToken` in headers for all the requests. <br/>
        5. When user `login` or `signup` you will get `accessToken` and `refreshToken`. <br/>
        6. After some time `accessToken` will get invalid and server gives 403 error. <br/>
        7. After getting 403 error, use `getToken` api to receive new `accessToken` and `refreshToken` and replace them in client. <br/>
        8. Along with `accessToken` you receive `accessToken_expire` witch shows the time `accessToken` get invalid. <br/>
        9. It's better to watch for it before request and call `getToken` to receive new `accessToken` this way you prevent from getting 403 error. <br/>
        10. If you get 401 error, you should remove `accessToken` and `refreshToken` redirect user to login page. <br/>
        11. When user is logged in and closes the browser, after opening browser again `accessToken` and `refreshToken` doesn't exist, so you should call `getToken` api before calling apis.
        <p/>
      operationId: users/signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                email:
                  type: string
                password:
                  type: string
                  description: at least one number and capital letter  and length in range
                confirmPassword:
                  type: string
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        201:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true

  /users/login:
    post:
      tags:
        - Users-Auth
      summary: LogIn
      description: Login account, also return `refreshToken`.
      operationId: users/login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username_email:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                  description: means user can log in with username or email address
                password:
                  type: string
                  description: at least one number and capital letter and length in range
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true

  /users/gettoken:
    put:
      tags:
        - Users-Auth
      summary: Get token
      description: Get new Tokens, also return `refreshToken`.
      operationId: users/gettoken
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: profileImages
          in: query
          schema:
            type: boolean
          required: false
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
                type: object
                properties:
                  profileImages:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        originalSize:
                          type: integer
                        size:
                          type: integer
                        thumbnail:
                          type: string
                        blurHash:
                          type: string
                        addDate:
                          $ref: '#/components/schemas/DateString'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/logout:
    put:
      tags:
        - Users-Auth
      summary: Logout
      description: Logout user, return __accessToken__ as empty string and also reset/remove `refreshToken` cookie if use in browser. in other environments reset `refreshToken` from client after successful logout.
      operationId: users/logout
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  accessToken:
                    type: string
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /users/computeUserStats:
    put:
      tags:
        - Users-Compute
      summary: Change Specific User Settings
      description: <p>
        Returns data based on computeUserStats <br/>
        limited to 3 call per minute <br/>
        every week at 01:00 of sunday, extract favorite genres from last 500 titles from [like, save, follow, finished] movies.
        <p/>
      operationId: users/changeUserSettings
      security:
        - accessToken: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      favoriteGenres:
                        $ref: '#/components/schemas/FavoriteGenres'
                      lastUpdate:
                        $ref: '#/components/schemas/DateString'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /utils/getMessage:
    get:
      tags:
        - Utils
      summary: Global message
      description: return the global message set by admin
      operationId: utils-getMessage
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      data:
                        $ref: '#/components/schemas/DateString'

  /utils/getApps:
    get:
      tags:
        - Utils
      summary: App Files
      description: return return apps with their data
      operationId: utils-getApps
      parameters:
        - name: appName
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AppData'

  /utils/checkAppUpdate/{appName}/{os}/{version}:
    get:
      tags:
        - Utils
      summary: Check App Update
      description: check app update exists, also send message
      operationId: utils-checkAppUpdate
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: os
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
            pattern: \d\d?\.\d\d?\.\d\d?
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/CheckUpdateData'

  /movies/{apiName}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: New/Update/Trailer Movies
      description: Return news/updates/trailers movies
      operationId: movies-news
      parameters:
        - name: apiName
          required: true
          in: path
          schema:
            type: string
            default: news
            enum:
              - news
              - updates
              - trailers
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/newsWithDate/{date}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: New Movies With Date
      description: Return recent movies (new released movies after [date]).
      operationId: movies-newsWithDate
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/updatesWithDate/{date}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Update Movies With Date
      description: return movies sorted by update date (movies with new episode or higher quality  after [date]).
      operationId: movies-updateWithDate
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/sortedMovies/{sortBase}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Sorted Movies
      description: Return movies sorted by something like 'comingSoon'. ranking update every 12 hour.
      operationId: movies-sortedMovies
      parameters:
        - $ref: '#/components/parameters/sortBase'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/seriesOfDay/{dayNumber}/{types}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies
      summary: Series Of Day
      description: Return series that get release on that day.
      operationId: movies-seriesOfDay
      parameters:
        - $ref: '#/components/parameters/dayNumber'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/multiple/status/{types}/{dataLevel}/{imdbScores}/{malScores}/{count}/{page}:
    get:
      tags:
        - Movies
      summary: Multiple Movies
      description: See yourself!
      operationId: movies-multi-status
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      inTheaters:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      comingSoon:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      news:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'
                      update:
                        type: array
                        items:
                          $ref: '#/components/schemas/MovieData'

  /movies/searchByID/{id}/{dataLevel}:
    get:
      tags:
        - Movies-Search
      summary: Search Movie Id
      description: Return Movie Data
      operationId: movies-searchMovieById
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/seasons_query'
        - $ref: '#/components/parameters/episodes_query'
        - $ref: '#/components/parameters/qualities_query'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
        - name: embedRelatedTitles
          required: false
          in: query
          schema:
            type: boolean
            default: false
        - name: embedCollections
          required: false
          in: query
          schema:
            type: boolean
            default: false
        - name: embedDownloadLinksConfig
          required: false
          in: query
          description: also receive users downloadLinks config, result in slower response
          schema:
            type: boolean
            default: false
      responses:
        200:
          $ref: '#/components/responses/Movie_single_200'

  /movies/{staffOrCharacter}/searchByID/{id}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff/Character By Id
      description: Return Staff/Character Data
      operationId: movies-searchStaffById
      parameters:
        - $ref: '#/components/parameters/staffOrCharacter'
        - $ref: '#/components/parameters/id_int'
        - $ref: '#/components/parameters/creditsCount'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Staff'

  /movies/searchStaffAndCharacter/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff And Character
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchStaffAndCharacter
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
        - $ref: '#/components/parameters/noUserStats'
        - name: dataLevel
          required: true
          in: path
          schema:
            type: string
            enum: [ 'low', 'medium', 'high' ]
            default: 'low'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      staff:
                        type: array
                        items:
                          $ref: '#/components/schemas/Staff'
                      characters:
                        type: array
                        items:
                          $ref: '#/components/schemas/Character'

  /movies/searchStaff/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Staff
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchStaff
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
        - $ref: '#/components/parameters/noUserStats'
        - name: dataLevel
          required: true
          in: path
          schema:
            type: string
            enum: [ 'low', 'medium', 'high' ]
            default: 'low'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Staff'

  /movies/searchCharacter/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Character
      description: __dataLevel__ can only be on one ['low', 'medium', 'high']
      operationId: movies-searchCharacter
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/gender_query'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/hairColor_query'
        - $ref: '#/components/parameters/eyeColor_query'
        - $ref: '#/components/parameters/age_query'
        - $ref: '#/components/parameters/noUserStats'
        - name: dataLevel
          required: true
          in: path
          schema:
            type: string
            enum: [ 'low', 'medium', 'high' ]
            default: 'low'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'

  /movies/searchMovie/{dataLevel}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Movie
      description: ''
      operationId: movies-searchMovie
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/country_query'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
        - name: title
          required: false
          in: query
          schema:
            type: string
        - name: years
          required: false
          in: query
          schema:
            type: string
            pattern: \d+-\d+
        - name: types
          required: false
          in: query
          schema:
            type: string
            #enum: ['serial', 'movie', 'anime_serial', 'anime_movie']
            example: 'serial-anime_serial'
        - name: imdbScores
          required: false
          in: query
          schema:
            type: string
            pattern: \d-\d
            default: '0-10'
        - name: malScores
          required: false
          in: query
          schema:
            type: string
            pattern: \d-\d
            default: '0-10'
        - name: numberOfSeason
          required: false
          in: query
          schema:
            type: string
            pattern: \d+(-\d+)?
            default: '0-10'
        - name: genres
          required: false
          in: query
          description: Array of String joined by '-'
          example: action-sci_fi-drama
          schema:
            type: string
            description: Array of String joined by '-'
        - name: movieLang
          required: false
          in: query
          schema:
            type: string
        - name: dubbed
          required: false
          in: query
          schema:
            type: boolean
        - name: hardSub
          required: false
          in: query
          schema:
            type: boolean
        - name: censored
          required: false
          in: query
          schema:
            type: boolean
        - name: subtitle
          required: false
          in: query
          schema:
            type: boolean
        - name: watchOnlineLink
          required: false
          in: query
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/genres/{genres}/{types}/{dataLevel}/{imdbScores}/{malScores}/{page}:
    get:
      tags:
        - Movies-Search
      summary: Search Genres
      description: Return array of movies match with searching genres.
      operationId: movies-searchGenres
      parameters:
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
        - name: genres
          required: true
          in: path
          description: Array of String joined by '-'
          example: action-sci_fi-drama
          schema:
            type: string
            description: Array of String joined by '-'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/credits/{id}/{page}:
    get:
      tags:
        - Credits
      summary: Movie Credits by Movie Id
      description: Return Movie Credits Data
      operationId: movies-getCreditsByMovieId
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Credit'

  /movies/{staffOrCharacter}/credits/{id}/{page}:
    get:
      tags:
        - Credits
      summary: Staff/Character Credits by Id
      description: Return Staff/Character Credits Data
      operationId: movies-getStaffCreditsById
      parameters:
        - $ref: '#/components/parameters/staffOrCharacter'
        - $ref: '#/components/parameters/id_int'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Credit'

  /movies/status/genres:
    get:
      tags:
        - Movies-Status
      summary: Status Of Genres
      description: Returns all available genres with their count.
      operationId: movies-status-genres
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        genre:
                          type: string
                        poster:
                          $ref: '#/components/schemas/Poster'
                        count:
                          type: integer

  /movies/status/movieSources:
    get:
      tags:
        - Movies-Status
      summary: Status Of Movie Sources
      description: Returns movie sources with latest url.
      operationId: movies-status-movieSources
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MovieSources'

  /movies/userstats/doc:
    get:
      tags:
        - Movies-UserStats
      summary: document for user stats and stuff
      description: check [user_stats_doc](./USER_STATS.README.md)
      operationId: movies-userstats-doc

  /movies/addUserStats/likeOrDislike/{statType}/{id}:
    put:
      tags:
        - Movies-UserStats
      summary: Add/Remove Movie/Staff/Character Like/Dislike
      description: .
      operationId: movies-addUserStatsLikeDislike
      parameters:
        - name: statType
          required: true
          in: path
          schema:
            type: string
            enum: [ 'like_movie', 'dislike_movie', 'like_staff', 'dislike_staff', 'like_character', 'dislike_character' ]
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/remove_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/followStaff/{statType}/{id}:
    put:
      tags:
        - Movies-UserStats
      summary: Add/Remove Staff/Character follow/favorite
      description: .
      operationId: movies-addUserStatsFollowStaff
      parameters:
        - name: statType
          required: true
          in: path
          schema:
            type: string
            enum: [ 'follow_staff', 'favorite_character' ]
        - $ref: '#/components/parameters/id_int'
        - $ref: '#/components/parameters/remove_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/finish_movie/{id}:
    put:
      tags:
        - Movies-UserStats-FinishMovie
      summary: Add/Remove Movie To finished/dropped list
      description: <p> handle when user finished watching movie/serial or dropped it. also can handle favorite movie/serial<br/>
        movie/serial should be released before doing this action. <br/>
        if serial isn't ended, it will considered as dropped <br/>
        <p/>
      operationId: movies-addUserStatsFinishMovie
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/remove_query'
        - $ref: '#/components/parameters/favorite_query'
        - name: startDate
          in: query
          schema:
            type: string
          allowEmptyValue: true
        - name: endDate
          in: query
          schema:
            type: string
          allowEmptyValue: true
        - name: score
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 10
          allowEmptyValue: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: Movie didnt released yet
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/finish_movie/{id}/handle_favorite/{favorite}:
    put:
      tags:
        - Movies-UserStats-FinishMovie
      summary: Add/Remove Movie To finished/dropped list
      description: handle favorite movies. it should be already added to finish_movie
      operationId: movies-addUserStatsFavoriteMovie
      parameters:
        - $ref: '#/components/parameters/id'
        - name: favorite
          required: false
          in: path
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/follow_movie/{id}:
    put:
      tags:
        - Movies-UserStats-FinishMovie
      summary: Add/Remove Movie To Follow list
      description: add serial to list of serials that user follows, only works for serials titles. add header 'isBotRequest' if requesting from a bot.
      operationId: movies-addUserStatsFollowMovie
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/remove_query'
        - name: score
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 10
          allowEmptyValue: true
        - name: watch_season
          in: query
          schema:
            type: integer
            minimum: 0
          allowEmptyValue: true
        - name: watch_episode
          in: query
          schema:
            type: integer
            minimum: 0
          allowEmptyValue: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: Works for serials only
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/watchlist_movie/{id}/{groupName}:
    put:
      tags:
        - Movies-UserStats-WatchList
      summary: Add/Remove To Watch list
      description: add movie/serial to watch list
      operationId: movies-addUserStatsWatchListMovie
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/remove_query'
        - name: groupName
          in: path
          schema:
            type: string
            default: default
          required: true
          allowEmptyValue: false
        - name: score
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 10
          allowEmptyValue: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: already following or watched
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/watchlist_movie/groups:
    get:
      tags:
        - Movies-UserStats-WatchList
      summary: Get groups of Watch lists
      description: Get groups of Watch lists
      operationId: movies-addUserStatsWatchListGroup
      parameters:
        - name: embedSampleMovies
          required: false
          in: query
          schema:
            type: boolean
            required: false
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/watchlist_movie/addGroup/{groupName}:
    put:
      tags:
        - Movies-UserStats-WatchList
      summary: Add/Remove group for Watch list
      description: Add/Remove group for Watch list. limited to 20 groups
      operationId: movies-addUserStatsWatchListAddGroup
      parameters:
        - $ref: '#/components/parameters/remove_query'
        - name: groupName
          in: path
          schema:
            type: string
            default: default
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: already exist
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/collection_movie/addCollection/{collectionName}/{isPublic}/{description}:
    put:
      tags:
        - Movies-UserStats-Collection
      summary: Add/Remove Collection
      description: Add/Remove Collection for movies. limited to 20 groups
      operationId: movies-addUserStatsAddCollection
      parameters:
        - $ref: '#/components/parameters/remove_query'
        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
        - name: description
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
        - name: isPublic
          in: path
          schema:
            type: boolean
            default: true
          required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: already exist
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/collection_movie/updateCollection/{collectionName}:
    put:
      tags:
        - Movies-UserStats-Collection
      summary: Update Collection
      description: Update Collection
      operationId: movies-addUserStatsUpdateCollection
      parameters:
        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionName:
                  required: true
                  type: string
                description:
                  required: true
                  type: string
                isPublic:
                  required: true
                  type: boolean
                  default: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: Collection name already exist
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/collection_movie/addMovie/{collectionName}/{id}:
    put:
      tags:
        - Movies-UserStats-Collection
      summary: Add/Remove Movie of Collection
      description: Add/Remove movie from Collection
      operationId: movies-addUserStatsAddMovieCollection
      parameters:
        - $ref: '#/components/parameters/remove_query'
        - $ref: '#/components/parameters/id'
        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: already exist
                  code:
                    type: integer
                    default: 409

  /movies/addUserStats/collection_movie/collections:
    get:
      tags:
        - Movies-UserStats-Collection
      summary: Get Collections
      description: Get Collections
      operationId: movies-addUserStatsMovieCollection
      parameters:
        - name: embedSampleMovies
          required: false
          in: query
          schema:
            type: boolean
            required: false
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/collection_movie/movies/{collectionName}/{dataLevel}/{page}:
    get:
      tags:
        - Movies-UserStats-Collection
      summary: Get Collections Movies, user must own the collection or it must be a public collection
      description: Get Collections Movies
      operationId: movies-addUserStatsCollectionMovies
      parameters:
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/addUserStats/collection_movie/search/{collectionName}/{page}:
    get:
      tags:
        - Movies-UserStats-Collection
      summary: Search Collections
      description: Search in collections
      operationId: movies-addUserStatsSearchCollection
      parameters:
        - $ref: '#/components/parameters/page'
        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          allowEmptyValue: false
        - name: embedSampleMovies
          required: false
          in: query
          schema:
            type: boolean
            required: false
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/changeScore/{stat_list_type}/{score}/{id}:
    put:
      tags:
        - Movies-UserStats-State
      summary: Change Score of movie
      description: change Score of saved/follow/watched movies
      operationId: movies-addUserStatsChangeScore
      parameters:
        - $ref: '#/components/parameters/id'
        - name: score
          in: path
          schema:
            type: number
            minimum: 0
            maximum: 10
          allowEmptyValue: false
          required: true
        - name: stat_list_type
          in: path
          schema:
            type: string
            enum:
              - finish_movie
              - follow_movie
              - watchlist_movie
          allowEmptyValue: false
          required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/addUserStats/changeWatchState/{stat_list_type}/{watch_season}/{watch_episode}/{id}:
    put:
      tags:
        - Movies-UserStats-State
      summary: Change Watch State of movie
      description: change Watch State of follow/watched movies
      operationId: movies-addUserStatsChangeWatchState
      parameters:
        - $ref: '#/components/parameters/id'
        - name: watch_season
          in: path
          schema:
            type: number
            minimum: 0
          allowEmptyValue: false
          required: true
        - name: watch_episode
          in: path
          schema:
            type: number
            minimum: 0
          allowEmptyValue: false
          required: true
        - name: stat_list_type
          in: path
          schema:
            type: string
            enum:
              - finish_movie
              - follow_movie
          allowEmptyValue: false
          required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
        409:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  errorMessage:
                    type: string
                    default: Works for serials only
                  code:
                    type: integer
                    default: 409

  /movies/userStatsList/{statType}/{dataLevel}/{page}:
    get:
      tags:
        - Movies-UserStats-Lists
      summary: User Stats List
      description: Return array of movies/staff/character.  add header 'isBotRequest' if requesting from a bot.
      operationId: movies-userStatsList
      parameters:
        - name: statType
          required: true
          in: path
          schema:
            type: string
            enum: [ 'like_movie', 'dislike_movie','like_staff', 'dislike_staff', 'like_character',
                    'dislike_character', 'follow_staff', 'favorite_character',
                    'finish_movie', 'follow_movie', 'watchlist_movie', 'episode_release', 'related_movie' ]
        - name: sortBy
          required: false
          description: only works for finish_movie, follow_movie, watchlist_movie.  By default sorted by date
          in: query
          schema:
            type: string
            enum:
              - date
              - score
            default: date
        - name: favoritesOnly
          required: false
          description: only works for finish_movie
          in: query
          schema:
            type: boolean
            default: false
        - name: dropsOnly
          required: false
          description: only works for finish_movie
          in: query
          schema:
            type: boolean
            default: false
        - name: groupName
          required: false
          description: only works for watchlist_movie
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/MovieData'
                      - $ref: '#/components/schemas/Staff'
                      - $ref: '#/components/schemas/Character'

  /movies/birthday/{staffOrCharacter}/{dataLevel}/{page}:
    get:
      tags:
        - Birthday
      summary: Birthday List
      description: Return array of staff/character.
      operationId: movies-birthday
      parameters:
        - $ref: '#/components/parameters/staffOrCharacter'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/followedOnly_query'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Staff'
                        - $ref: '#/components/schemas/Character'

  /bots/login:
    post:
      tags:
        - Bots
      summary: Login Bot
      description: connect to user account in bot
      operationId: bots-login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username_email:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                  description: user can log in with username or email address
                  example: ashkanaz2828
                password:
                  type: string
                  description: at least one number and capital letter and length in range
                  example: p@sswOrD123#
                botId:
                  type: string
                  description: id of the bot, generated when bot added in adminPanel
                chatId:
                  type: string
                  description: id of the chat, generated and used by bot
                botUsername:
                  type: string
                  description: username of the user inside the bot
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'

  /bots/{botId}/notification/{userId}/{notificationFlag}:
    put:
      tags:
        - Bots
      summary: Account Notification
      description: Toggle account notification receive by bot
      operationId: bots-update-notification-flag
      parameters:
        - $ref: '#/components/parameters/botId'
        - $ref: '#/components/parameters/notificationFlag'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /movies/bots/{botId}/{moviesRequestName}/{types}/{dataLevel}/{imdbScores}/{malScores}:
    get:
      tags:
        - Bots
      summary: Bots Api
      description: <p>
        return movies based on the date that saved in server, send 404 error when no new movie or updates exist. <br/>
        send maximum 24 item . <br/>
        limited to 5 call per minute
        </p>
      operationId: movies-bots
      parameters:
        - $ref: '#/components/parameters/botId'
        - $ref: '#/components/parameters/moviesRequestName'
        - $ref: '#/components/parameters/types'
        - $ref: '#/components/parameters/dataLevel'
        - $ref: '#/components/parameters/imdbScores'
        - $ref: '#/components/parameters/malScores'
        - $ref: '#/components/parameters/dontUpdateServerDate_query'
        - $ref: '#/components/parameters/embedStaffAndCharacter'
        - $ref: '#/components/parameters/noUserStats'
      responses:
        200:
          $ref: '#/components/responses/Movies_200'

  /movies/animeEnglishName:
    get:
      tags:
        - Others
      summary: Anime English Name
      description: Return english names of anime based on japanese name.
      operationId: movies-animeEnglishName
      parameters:
        - name: japaneseNames
          required: true
          in: query
          description: exmaple japaneseNames=name1&japaneseNames=name2...
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        japaneseName:
                          type: string
                        englishName:
                          type: string

  /admin/login:
    post:
      tags:
        - Admin-Auth
      summary: Admin LogIn
      description: Login account, also return `refreshToken`.
      operationId: admin-login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username_email:
                  type: string
                  pattern: ^[a-z|\d_-]+$
                  minimum: 6
                  maximum: 50
                  required: true
                  description: means user can log in with username or email address
                password:
                  type: string
                  description: at least one number and capital letter and length in range
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true

  /admin/gettoken:
    put:
      tags:
        - Admin-Auth
      summary: Admin Get token
      description: Get new Tokens, also return `refreshToken`.
      operationId: admin-gettoken
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceInfo:
                  $ref: '#/components/schemas/DeviceInfo'
      parameters:
        - name: profileImages
          in: query
          schema:
            type: boolean
          required: false
        - name: noCookie
          in: query
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                  - $ref: '#/components/schemas/SignUpResult'
                type: object
                properties:
                  profileImages:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        originalSize:
                          type: integer
                        size:
                          type: integer
                        thumbnail:
                          type: string
                        blurHash:
                          type: string
                        addDate:
                          $ref: '#/components/schemas/DateString'
        400:
          description: Bad request body fields
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: object
                    nullable: true
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /admin/crawler/start:
    put:
      tags:
        - Admin-Crawler
      summary: Start Crawler
      description: Manually starting crawler
      operationId: admin-crawler-start
      parameters:
        - name: sourceName
          in: query
          required: true
          schema:
            type: string
        - name: mode
          in: query
          required: true
          schema:
            type: integer
            default: 0
        - name: handleDomainChange
          in: query
          required: true
          schema:
            type: boolean
            default: false
        - name: handleDomainChangeOnly
          in: query
          required: true
          schema:
            type: boolean
            default: false
        - name: dontUseRemoteBrowser
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: axiosBlockThreshHold
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: remoteBrowserBlockThreshHold
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: castUpdateState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: apiUpdateState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: trailerUploadState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: crawlerConcurrency
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/torrent/search:
    put:
      tags:
        - Admin-Crawler
      summary: search torrent
      description: Search in torrent sources by title
      operationId: admin-crawler-torrent-search
      parameters:
        - name: sourceName
          in: query
          required: true
          schema:
            type: string
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - serial
              - anime_serial
              - movie
              - anime_movie
        - name: dontUseRemoteBrowser
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: castUpdateState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: apiUpdateState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: trailerUploadState
          in: query
          required: false
          schema:
            type: string
            enum:
              - none
              - ignore
              - force
            default: none
        - name: crawlerConcurrency
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/pause/{duration}:
    put:
      tags:
        - Admin-Crawler
      summary: Pause Crawler
      description: Manually Pause crawler
      operationId: admin-crawler-pause
      parameters:
        - name: duration
          in: path
          description: minutes
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 120
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/resume/{force}:
    put:
      tags:
        - Admin-Crawler
      summary: Resume Crawler
      description: Manually Resume crawler
      operationId: admin-crawler-resume
      parameters:
        - name: force
          in: path
          required: true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/stop:
    put:
      tags:
        - Admin-Crawler
      summary: Stop Crawler
      description: Manually Stop crawler
      operationId: admin-crawler-stop
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/status:
    get:
      tags:
        - Admin-Crawler
      summary: Crawler Status
      description: Status of crawler
      operationId: admin-crawler-status
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/sources:
    get:
      tags:
        - Admin-Crawler
      summary: Crawler Sources
      description: Sources of crawler
      operationId: admin-crawler-sources
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/editSource/{sourceName}:
    put:
      tags:
        - Admin-Crawler
      summary: Edit Crawler Source
      description: Update data of selected source.
      operationId: admin-crawler-editSource
      parameters:
        - name: sourceName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_url:
                  type: string
                serial_url:
                  type: string
                crawlCycle:
                  type: integer
                  minimum: 0
                disabled:
                  type: boolean
                  default: false
                cookies:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                      expire:
                        type: integer
                reCrawl:
                  type: boolean
                  default: true
                description:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/removeSource/{sourceName}:
    delete:
      tags:
        - Admin-Crawler
      summary: Remove Crawler Source
      description: remove links/poster/trailer/... related to this source.
      operationId: admin-crawler-removeSource
      parameters:
        - name: sourceName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/addSource:
    put:
      tags:
        - Admin-Crawler
      summary: Add Crawler Source
      description: Add new source to crawler.
      operationId: admin-crawler-addSource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceName:
                  type: string
                movie_url:
                  type: string
                serial_url:
                  type: string
                crawlCycle:
                  type: integer
                  minimum: 0
                disabled:
                  type: boolean
                  default: false
                cookies:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                      expire:
                        type: integer
                description:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/crawlUrl:
    put:
      tags:
        - Admin-Crawler
      summary: Crawl Url
      description: Crawl single url.
      operationId: admin-crawler-crawlUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceName:
                  type: string
                url_body:
                  type: string
                title:
                  type: string
                type:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/crawler/duplicateTitles:
    get:
      tags:
        - Admin-Crawler
      summary: Duplicate Titles
      description: Get duplicated titles
      operationId: admin-crawler-duplicateTitles
      parameters:
        - name: preCheck
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: autoRemove
          in: query
          required: false
          description: removes duplicated titles found by preCheck function. only work when preCheck=true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/analysis/{serverAnalysisFieldName}/{startTime}/{endTime}/{skip}/{limit}:
    get:
      tags:
        - Admin-Analysis
      summary: Crawler Analysis
      description: Analysis of crawler
      operationId: admin-crawler-analysis
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/serverAnalysisFieldName'
        - name: startTime
          in: path
          required: true
          schema:
            type: string
            format: date
        - name: endTime
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/analysis/currentMonth/{serverAnalysisFieldName}/{page}:
    get:
      tags:
        - Admin-Analysis
      summary: Crawler Analysis (this month)
      description: Current Month Analysis of crawler
      operationId: admin-crawler-currentMonthAnalysis
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/serverAnalysisFieldName'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/analysis/resolve/{serverAnalysisFieldName}/{id}:
    put:
      tags:
        - Admin-Analysis
      summary: Resolve/Remove Analysis
      description: Resolve/Remove Analysis
      operationId: admin-crawler-resolveAnalysis
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/serverAnalysisFieldName'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/analysis/resolve/{serverAnalysisFieldName}:
    put:
      tags:
        - Admin-Analysis
      summary: Batch Resolve/Remove Analysis
      description: Batch Resolve/Remove Analysis
      operationId: admin-crawler-batchResolveAnalysis
      parameters:
        - $ref: '#/components/parameters/serverAnalysisFieldName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    $ref: '#/components/parameters/id'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/analysis/resolve/{serverAnalysisFieldName}/lastDays/{days}:
    put:
      tags:
        - Admin-Analysis
      summary: Batch Resolve/Remove Analysis
      description: Batch Resolve/Remove Analysis of last days
      operationId: admin-crawler-batchResolveAnalysisByDays
      parameters:
        - $ref: '#/components/parameters/serverAnalysisFieldName'
        - name: days
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/server/status:
    get:
      tags:
        - Admin-ServerStatus
      summary: Resource status of server
      description: Resource status of server
      operationId: admin-serverStatus
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/remoteBrowsers/status:
    get:
      tags:
        - Admin-ServerStatus
      summary: Resource status of remoteBrowsers
      description: Resource status of remoteBrowsers
      operationId: admin-remoteBrowsersStatus
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/remotebrowsers/{mutateType}/{id}:
    put:
      tags:
        - Admin-ServerStatus
      summary: Change status of remoteBrowsers
      description: enable/disable selected remote browser temporary (enables again on the server restart).
      operationId: admin-changeRemoteBrowsersStatus
      parameters:
        - $ref: '#/components/parameters/id'
        - name: mutateType
          in: path
          required: true
          schema:
            type: string
            enum:
              - enable
              - disable
        - name: all
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/remoteBrowsers/checkSource/{sourceName}/{url}:
    get:
      tags:
        - Admin-ServerStatus
      summary: Check source
      description: check source works on all remote browsers.
      operationId: admin-checkSource
      parameters:
        - $ref: '#/components/parameters/id'
        - name: sourceName
          in: path
          required: true
          schema:
            type: string
        - name: url
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/configs/update:
    put:
      tags:
        - Admin-ServerStatus
      summary: Update Config
      description: Update configs of the server
      operationId: admin-updateConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                corsAllowedOrigins:
                  type: string
                disableTestUserRequests:
                  type: boolean
                disableCrawlerForDuration:
                  type: boolean
                disableCrawler:
                  type: boolean
                developmentFaze:
                  type: boolean
                mediaFileSizeLimit:
                  type: integer
                  default: 100
                  description: it in mb
                profileFileSizeLimit:
                  type: integer
                  default: 2
                  description: it in mb
                profileImageCountLimit:
                  type: integer
                  default: 5
                mediaFileExtensionLimit:
                  type: string
                profileImageExtensionLimit:
                  type: string
                torrentDownloadMaxFileSize:
                  type: integer
                  default: 800
                  description: it is in mb
                disableBotsNotifications:
                  type: boolean
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/configs:
    get:
      tags:
        - Admin-ServerStatus
      summary: Get Config
      description: Get configs of the server
      operationId: admin-getConfig
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/setMessage:
    put:
      tags:
        - Admin-Utils
      summary: Set Message
      description: set message that all users see when open app
      operationId: admin-setMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                date:
                  type: string
                  format: date
                  description: message expiration date
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/addNewAppVersion:
    post:
      tags:
        - Admin-Utils
      summary: Add App
      description: add new app version. receive (appFile ~ File Buffer) in request body
      operationId: admin-addAppVersion
      parameters:
        - name: appData
          in: query
          required: true
          schema:
            type: object
            properties:
              appName:
                type: string
              version:
                type: string
              versionName:
                type: string
              os:
                type: string
              description:
                type: string
              minVersion:
                type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/removeAppVersion/{vid}:
    put:
      tags:
        - Admin-Utils
      summary: Remove App
      description: remove app version.
      operationId: admin-removeAppVersion
      parameters:
        - name: vid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/appVersions:
    get:
      tags:
        - Admin-Utils
      summary: Get Apps
      description: Get Apps
      operationId: admin-getApps
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/3rdpartyApis/checkWorking:
    get:
      tags:
        - Admin-Utils
      summary: Check Apis
      description: return api keys checking result
      operationId: admin-checkExternalApis
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/bots:
    get:
      tags:
        - Admin-Bots
      summary: Bots
      description: return bots data
      operationId: admin-bots-botsData
      parameters:
        - $ref: '#/components/parameters/botId_query'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    oneOf:
                      - type: array
                        items:
                          $ref: '#/components/schemas/BotData'
                      - $ref: '#/components/schemas/BotData'

  /admin/bots/editBot/{botId}:
    put:
      tags:
        - Admin-Bots
      summary: Edit Bot
      description: edit bots data
      operationId: admin-bots-editBot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botName:
                  type: string
                  required: true
                botToken:
                  type: string
                  required: true
                botType:
                  type: string
                  required: true
                lastUseDate:
                  $ref: '#/components/schemas/DateString'
                lastApiCall_news:
                  $ref: '#/components/schemas/DateString'
                lastApiCall_updates:
                  $ref: '#/components/schemas/DateString'
                disabled:
                  type: boolean
                  default: false
                  required: true
                description:
                  type: string
                  required: false
                isOfficial:
                  type: boolean
                  default: false
                  required: true
                permissionToLogin:
                  type: boolean
                  default: false
                  required: true
                permissionToCrawl:
                  type: boolean
                  default: false
                  required: true
                permissionToTorrentLeech:
                  type: boolean
                  default: false
                  required: true
                permissionToTorrentSearch:
                  type: boolean
                  default: false
                  required: true
      parameters:
        - $ref: '#/components/parameters/botId_param'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/bots/addBot:
    put:
      tags:
        - Admin-Bots
      summary: Add Bot
      description: add new Bot
      operationId: admin-bots-addNewBot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botName:
                  type: string
                  required: true
                botToken:
                  type: string
                  required: true
                botType:
                  type: string
                  required: true
                disabled:
                  type: boolean
                  default: false
                  required: true
                description:
                  type: string
                  required: false
                isOfficial:
                  type: boolean
                  default: false
                  required: true
                permissionToLogin:
                  type: boolean
                  default: false
                  required: true
                permissionToCrawl:
                  type: boolean
                  default: false
                  required: true
                permissionToTorrentLeech:
                  type: boolean
                  default: false
                  required: true
                permissionToTorrentSearch:
                  type: boolean
                  default: false
                  required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/bots/deleteBot/{botId}:
    delete:
      tags:
        - Admin-Bots
      summary: Delete Bot
      description: delete bot data
      operationId: admin-bots-deleteBot
      parameters:
        - $ref: '#/components/parameters/botId_param'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/cronjobs:
    get:
      tags:
        - Admin-CronJobs
      summary: CronJobs
      description: return cronJobs status
      operationId: admin-cronJobs
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        running:
                          type: string
                        startDate:
                          $ref: '#/components/schemas/DateString'
                        state:
                          type: string
                        value:
                          oneOf:
                            - type: string
                            - type: integer
                            - type: object
                        description:
                          type: string

  /admin/CronJobs/start/{jobName}:
    put:
      tags:
        - Admin-CronJobs
      summary: Start CronJob
      description: start CronJob
      operationId: admin-startCronJobs
      parameters:
        - $ref: '#/components/parameters/jobName_param'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/movies/relatedTitle/add/{id1}/{id2}/{relation}:
    put:
      tags:
        - Admin-Movies
      summary: Add Related Title
      description: add relationship between titles
      operationId: admin-addRelatedTitle
      parameters:
        - name: id1
          in: path
          required: true
          schema:
            type: string
        - name: id2
          in: path
          required: true
          schema:
            type: string
        - name: relation
          in: path
          required: true
          schema:
            type: string
            enum:
              - prequel
              - sequel
              - spin_off
              - side_story
              - full_story
              - summary
              - parent_story
              - other
              - alternative_setting
              - alternative_version
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/movies/relatedTitle/remove/{id1}/{id2}:
    delete:
      tags:
        - Admin-Movies
      summary: Remove Titles Relation
      description: remove relationship between titles
      operationId: admin-removeRelatedTitle
      parameters:
        - name: id1
          in: path
          required: true
          schema:
            type: string
        - name: id2
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/remove/{removeType}/{id}:
    delete:
      tags:
        - Admin-Remove
      summary: Remove Docs/Rows
      description: Removes movieSource/movie/staff/character/user/. cannot remove users with role=admin
      operationId: admin-removeDocsRows
      parameters:
        - name: removeType
          in: path
          required: true
          schema:
            type: string
            enum:
              - movie
              - staff
              - character
              - user
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: string

  /admin/role/all_permissions:
    get:
      tags:
        - Admin-Role-Permission
      summary: Permissions List
      description: get list of all permissions
      operationId: admin-allPermissions
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string

  /admin/role/all_roles:
    get:
      tags:
        - Admin-Role-Permission
      summary: Roles List
      description: get list of all roles
      operationId: admin-allRoles
      parameters:
        - name: permissions
          required: false
          in: query
          description: return roles which have these permissions
          schema:
            type: string
            example: torrent_search,torrent_leach
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'

  /admin/role/{name}:
    get:
      tags:
        - Admin-Role-Permission
      summary: Role Data
      description: get data of a role
      operationId: admin-roleData
      parameters:
        - name: name
          required: true
          in: path
          description: name of the role
          schema:
            type: string
            example: default_user_role
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'

  /admin/role/new_role:
    post:
      tags:
        - Admin-Role-Permission
      summary: Create Role
      description: create new role
      operationId: admin-newRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                torrentLeachLimitGb:
                  type: number
                  required: true
                  minimum: 0
                torrentSearchLimit:
                  type: number
                  required: true
                  minimum: 0
                botsNotification:
                  type: boolean
                  required: true
                  default: false
                permissionIds:
                  type: array
                  required: true
                  items:
                    type: number
                    minimum: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/role/edit_role/{name}:
    post:
      tags:
        - Admin-Role-Permission
      summary: Edit Role
      description: edit roles data
      operationId: admin-editRole
      parameters:
        - name: name
          required: true
          in: path
          description: name of the role
          schema:
            type: string
            example: default_user_role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                torrentLeachLimitGb:
                  type: number
                  required: true
                  minimum: 0
                torrentSearchLimit:
                  type: number
                  required: true
                  minimum: 0
                botsNotification:
                  type: boolean
                  required: true
                  default: false
                permissionIds:
                  type: array
                  required: true
                  items:
                    type: number
                    minimum: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'

  /admin/remove_role/{name}:
    delete:
      tags:
        - Admin-Role-Permission
      summary: Delete Role
      description: delete data of a role
      operationId: admin-removeRole
      parameters:
        - name: name
          required: true
          in: path
          description: name of the role
          schema:
            type: string
            example: default_user_role
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

  /admin/role/users:
    get:
      tags:
        - Admin-Role-Permission
      summary: Role Users
      description: users of a role
      operationId: admin-roleUsers
      parameters:
        - name: roleName
          required: false
          in: query
          description: name of the role
          schema:
            type: string
            example: default_user_role
        - name: skip
          required: false
          in: query
          schema:
            type: number
            minimum: 0
        - name: limit
          required: false
          in: query
          schema:
            type: number
            minimum: 1
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: number
                        publicName:
                          type: string
                        rawUsername:
                          type: string
                        username:
                          type: string
                        registrationDate:
                          type: string
                        lastSeenDate:
                          type: string
                        email:
                          type: string
                        emailVerified:
                          type: boolean
                        roles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Role'

  /admin/edit_user_rols:
    post:
      tags:
        - Admin-Role-Permission
      summary: Edit User Role
      description: update the roles of a user
      operationId: admin-editUserRoles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  required: true
                roleIds:
                  type: array
                  required: true
                  items:
                    type: number
                    minimum: 0
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseCode'

security:
  - accessToken: [ ]

"components":
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    sortBase:
      name: sortBase
      required: true
      in: path
      schema:
        type: string
        enum: [ 'animeTopComingSoon', 'animeTopAiring', 'animeSeasonNow',
                'animeSeasonUpcoming', 'comingSoon', 'inTheaters',
                'boxOffice', 'like', 'like_month', 'follow_month', 'view_month'
        ]
        default: 'animeTopComingSoon'
    date:
      name: date
      required: true
      in: path
      schema:
        type: string
        format: date
    types:
      name: types
      required: true
      in: path
      schema:
        type: string
        default: 'serial-movie-anime_serial-anime_movie'
    dataLevel:
      name: dataLevel
      required: true
      in: path
      schema:
        type: string
        enum: [ 'dlink', 'low', 'telbot', 'medium', 'high', 'info' ]
        default: 'low'
    imdbScores:
      name: imdbScores
      required: true
      in: path
      schema:
        type: string
        pattern: \d-\d
        default: '0-10'
    malScores:
      name: malScores
      required: true
      in: path
      schema:
        type: string
        pattern: \d-\d
        default: '0-10'
    page:
      name: page
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    skip:
      name: skip
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    limit:
      name: limit
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    dayNumber:
      name: dayNumber
      required: true
      in: path
      schema:
        type: integer
        minimum: 0
        maximum: 6
        default: 1
    count:
      name: count
      required: true
      in: path
      schema:
        type: integer
        minimum: 1
        default: 1
    title:
      name: title
      required: true
      in: path
      schema:
        type: string
    id:
      name: id
      required: true
      in: path
      schema:
        type: string
    id_int:
      name: id
      required: true
      in: path
      schema:
        type: integer
    staffOrCharacter:
      name: staffOrCharacter
      required: true
      in: path
      schema:
        type: string
        enum: [ 'staff', 'character' ]
        default: staff
    botId:
      name: botId
      required: true
      in: path
      schema:
        type: string
    userId:
      name: userId
      required: true
      in: path
      schema:
        type: integer
    notificationFlag:
      name: notificationFlag
      required: true
      in: path
      schema:
        type: boolean
        default: true
    moviesRequestName:
      name: moviesRequestName
      required: true
      in: path
      schema:
        type: string
        enum: [ 'news', 'updates', 'newsAndUpdates' ]
        default: 'news'
    embedStaffAndCharacter:
      name: embedStaffAndCharacter
      required: false
      in: query
      schema:
        type: boolean
        default: false
    noUserStats:
      name: noUserStats
      description: dont check and return userStats for corresponding movie/staff/character. results in faster response
      required: false
      in: query
      schema:
        type: boolean
        default: false
    creditsCount:
      name: creditsCount
      required: false
      in: query
      schema:
        type: integer
        default: 12
        description: number of credits to return
        minimum: 0
        maximum: 48
    remove_query:
      name: remove
      required: false
      in: query
      schema:
        type: boolean
        default: false
    favorite_query:
      name: favorite
      required: false
      in: query
      schema:
        type: boolean
        default: false
    followedOnly_query:
      name: followedOnly
      required: false
      in: query
      schema:
        type: boolean
        default: false
    dontUpdateServerDate_query:
      name: dontUpdateServerDate
      required: false
      in: query
      schema:
        type: boolean
        default: false
    seasons_query:
      name: seasons
      required: false
      in: query
      schema:
        type: string
        pattern: \d+(-\d+)?
    episodes_query:
      name: episodes
      required: false
      in: query
      description: only works when dataLevel is one of ([dlink, high]) and season is single
      schema:
        type: string
        pattern: \d+(-\d+)?
    qualities_query:
      name: qualities
      required: false
      in: query
      schema:
        type: string
        example: 1080p-720p
    name_query:
      name: name
      required: false
      in: query
      schema:
        type: string
    botId_param:
      name: botId
      required: true
      in: path
      schema:
        type: string
    jobName_param:
      name: jobName
      required: true
      in: path
      schema:
        type: string
    botId_query:
      name: botId
      required: false
      in: query
      schema:
        type: string
    gender_query:
      name: gender
      required: false
      in: query
      schema:
        type: string
        enum: [ 'male', 'female', 'sexless' ]
    country_query:
      name: country
      required: false
      in: query
      schema:
        type: string
    hairColor_query:
      name: hairColor
      required: false
      in: query
      schema:
        type: string
    eyeColor_query:
      name: eyeColor
      required: false
      in: query
      schema:
        type: string
    age_query:
      name: age
      required: false
      in: query
      schema:
        type: string
        pattern: \d+(-\d+)?
        example: 25-40
    serverAnalysisFieldName:
      name: serverAnalysisFieldName
      in: path
      required: true
      schema:
        type: string
        enum:
          - botUserCounts
          - userCounts
          - crawlerLogs
          - serverLogs
          - warnings
          - googleCacheCalls
          - badLinks


  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

    Movies_200:
      description: Ok
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseCode'
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MovieData'

    Movie_single_200:
      description: Ok
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseCode'
            type: object
            properties:
              data:
                $ref: '#/components/schemas/MovieData'

  "schemas":
    FavoriteGenres:
      type: array
      items:
        type: object
        properties:
          genre:
            type: string
          count:
            type: integer
          percent:
            type: number
            format: float

    MovieData:
      oneOf:
        - $ref: '#/components/schemas/DataLevel_dlink'
        - $ref: '#/components/schemas/DataLevel_low'
        - $ref: '#/components/schemas/DataLevel_telbot'
        - $ref: '#/components/schemas/DataLevel_medium'
        - $ref: '#/components/schemas/DataLevel_high'
        - $ref: '#/components/schemas/DataLevel_info'

    DataLevel_dlink:
      allOf:
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      type: object
      properties:
        _id:
          type: string
        rawTitle:
          type: string
        year:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        qualities:
          type: array
          items:
            $ref: '#/components/schemas/Quality'
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'
        subtitles:
          type: array
          items:
            $ref: '#/components/schemas/Subtitle'
        sources:
          type: array
          items:
            type: object
            properties:
              sourceName:
                type: string
              pageLink:
                type: string

    DataLevel_low:
      allOf:
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        rawTitle:
          type: string
        year:
          type: string
        premiered:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        poster_wide_s3:
          $ref: '#/components/schemas/Poster_wide_s3'
        type:
          type: string
          enum: [ 'movie', 'serial', 'anime_movie', 'anime_serial' ]
        rating:
          $ref: '#/components/schemas/Rating'
        latestData:
          $ref: '#/components/schemas/LatestData'
        userStats:
          $ref: '#/components/schemas/UserStats'
        userStats_extra:
          $ref: '#/components/schemas/UserStats_extra'

    DataLevel_telbot:
      allOf:
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      type: object
      properties:
        _id:
          type: string
        rawTitle:
          type: string
        type:
          type: string
          enum: [ 'movie', 'serial', 'anime_movie', 'anime_serial' ]
        year:
          type: string
        premiered:
          type: string
        posters:
          type: array
          items:
            $ref: '#/components/schemas/Poster'
        poster_s3:
          $ref: '#/components/schemas/Poster_s3'
        poster_wide_s3:
          $ref: '#/components/schemas/Poster_wide_s3'
        genres:
          $ref: '#/components/schemas/StringArray'
        summary:
          $ref: '#/components/schemas/Summary'
        rating:
          $ref: '#/components/schemas/Rating'
        rated:
          type: string
        country:
          type: string
        latestData:
          $ref: '#/components/schemas/LatestData'
        duration:
          type: string
          description: example '60 min'
        releaseDay:
          type: string
          description: days of week
        seasonEpisode:
          type: array
          items:
            type: object
            properties:
              seasonNumber:
                type: integer
              episodes:
                type: integer
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'

    DataLevel_medium:
      allOf:
        - $ref: '#/components/schemas/DataLevel_low'
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      type: object
      properties:
        releaseState:
          type: string
          enum: [ 'inTheaters', 'comingSoon', 'waiting', 'done' ]
        rank:
          $ref: '#/components/schemas/Rank'
        alternateTitles:
          $ref: '#/components/schemas/StringArray'
        summary:
          $ref: '#/components/schemas/Summary'
        genres:
          $ref: '#/components/schemas/StringArray'
        genresWithImage:
          type: array
          items:
            description: only exist in movies/searchById api
            type: object
            properties:
              genre:
                type: string
              poster:
                $ref: '#/components/schemas/Poster'
              count:
                type: integer
        trailers:
          type: array
          items:
            $ref: '#/components/schemas/Trailer'
        trailerDate:
          $ref: '#/components/schemas/DateString'
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        nextEpisode:
          $ref: '#/components/schemas/NextEpisode'
        releaseDay:
          type: string
          description: days of week
        status:
          type: string
          enum: [ 'running','ended','unknown' ]
        boxOfficeData:
          type: object
          properties:
            weekend:
              type: string
            gross:
              type: string
            weeks:
              type: integer
        userStats:
          $ref: '#/components/schemas/UserStats'
        userStats_extra:
          $ref: '#/components/schemas/UserStats_extra'

    DataLevel_high:
      allOf:
        - $ref: '#/components/schemas/DataLevel_medium'
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      type: object
      properties:
        titleSynonyms:
          $ref: '#/components/schemas/StringArray'
        qualities:
          description: for movie titles check qualities and check seasons for series titles
          type: array
          items:
            $ref: '#/components/schemas/Quality'
        seasons:
          type: array
          items:
            $ref: '#/components/schemas/Season'
        subtitles:
          type: array
          items:
            $ref: '#/components/schemas/Subtitle'
        sources:
          type: array
          items:
            type: object
            properties:
              sourceName:
                type: string
              pageLink:
                type: string
        seasonEpisode:
          type: array
          items:
            type: object
            properties:
              seasonNumber:
                type: integer
              episodes:
                type: integer
        add_date:
          $ref: '#/components/schemas/DateString'
        apiUpdateDate:
          $ref: '#/components/schemas/DateString'
        castUpdateDate:
          $ref: '#/components/schemas/DateString'
        poster_s3:
          $ref: '#/components/schemas/Poster_s3'
        poster_wide_s3:
          $ref: '#/components/schemas/Poster_wide_s3'
        trailer_s3:
          $ref: '#/components/schemas/Trailer_s3'
        endYear:
          type: string
        officialSite:
          type: string
        webChannel:
          type: string
        duration:
          type: string
          description: example '60 min'
        totalDuration:
          type: string
          description: in format hh:mm example 14:11 === 14 hours and 11 min
        apiIds:
          type: object
          properties:
            imdbID:
              type: string
            tvmazeID:
              type: integer
            jikanID:
              type: integer
            kitsuID:
              type: integer
            amvID:
              type: integer
        totalSeasons:
          type: integer
        boxOffice:
          type: string
        rated:
          type: string
        movieLang:
          type: string
        country:
          type: string
        awards:
          type: string
        animeType:
          type: string
        animeSource:
          type: string
        animeSeason:
          type: string
        userStats:
          $ref: '#/components/schemas/UserStats'
        userStats_extra:
          $ref: '#/components/schemas/UserStats_extra'

    DataLevel_info:
      allOf:
        - $ref: '#/components/schemas/DataLevel_high'
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/RelatedTitles'
        - $ref: '#/components/schemas/RelatedCollections'
      not:
        type: object
        properties:
          seasons:
            type: array
          qualities:
            type: array
          subtitles:
            type: array

    DataLevels:
      type: string
      enum: [ 'dlink', 'low', 'telbot', 'medium', 'high', 'info' ]
      default: 'low'

    RelatedTitles:
      description: only exist for single movie requests
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          title:
            type: string
          rawTitle:
            type: string
          type:
            type: string
          year:
            type: string
          posters:
            type: array
            items:
              $ref: '#/components/schemas/Poster'
          relation:
            type: string
            enum: [ 'prequel', 'sequel', 'spin_off', 'side_story',
                    'full_story', 'summary', 'parent_story', 'other',
                    'alternative_setting', 'alternative_version' ]

    RelatedCollections:
      description: only exist for single movie requests
      type: array
      items:
        type: object
        properties:
          date:
            $ref: '#/components/schemas/DateString'
          collection_name:
            type: string
          public:
            type: boolean
          description:
            type: string
          user:
            type: object
            properties:
              username:
                type: string
          movies:
            type: array
            items:
              type: object
              properties:
                _id:
                  type: string
                title:
                  type: string
                rawTitle:
                  type: string
                type:
                  type: string
                posters:
                  type: array
                  items:
                    $ref: '#/components/schemas/Poster'

    LatestData:
      type: object
      properties:
        season:
          type: integer
        episode:
          type: integer
        quality:
          type: string
        updateReason:
          type: string
          enum: [ 'season', 'episode', 'quality', 'torrent-season', 'torrent-episode' ]
        hardSub:
          type: string
          pattern: /S\d+E\d+/
        dubbed:
          type: string
          description: for series 's1e5' shows last episode with hardsub/dubbed/..
        subtitle:
          type: string
          description: for movies 's1e1' means hardsub/dubbed/.. exist
        censored:
          type: string
        watchOnlineLink:
          type: string
        torrentLinks:
          type: string

    EmbedCast:
      type: object
      properties:
        actorsAndCharacters:
          default: null
          description: only exist if query parameter embedStaffAndCharacter=true
          type: array
          items:
            $ref: '#/components/schemas/Actor_and_Character'
        staff:
          default: null
          description: only exist if query parameter embedStaffAndCharacter=true
          type: object
          properties:
            directors:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            writers:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'
            others:
              type: array
              items:
                $ref: '#/components/schemas/Actor_and_Character'

    Actor_and_Character:
      type: object
      properties:
        id:
          type: integer
        actorPositions:
          $ref: '#/components/schemas/StringArray'
        characterRole:
          type: string
        staff:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            gender:
              type: string
              enum: [ 'Male', 'Female' ]
            country:
              type: string
            imageData:
              type: object
              properties:
                size:
                  type: integer
                thumbnail:
                  type: string
                blurHash:
                  type: string
                url:
                  type: string
                vpnStatus:
                  $ref: '#/components/schemas/VpnStatus'
        character:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            gender:
              type: string
              enum: [ 'Male', 'Female', 'Sexless' ]
            imageData:
              type: object
              properties:
                size:
                  type: integer
                thumbnail:
                  type: string
                blurHash:
                  type: string
                url:
                  type: string
                vpnStatus:
                  $ref: '#/components/schemas/VpnStatus'

    UserStats:
      description: movies only
      type: object
      properties:
        like:
          type: boolean
        likes_count:
          type: integer
        dislike:
          type: boolean
        dislikes_count:
          type: integer
        favorite:
          type: boolean
        favorite_count:
          type: integer
        dropped:
          type: boolean
        dropped_count:
          type: integer
        finished:
          type: boolean
        finished_count:
          type: integer
        follow:
          type: boolean
        follow_count:
          type: integer
        watchlist:
          type: boolean
        watchlist_count:
          type: integer
        continue_count:
          type: integer
        view_count:
          type: integer
        view_month_count:
          type: integer

    UserStats_extra:
      description: movies only
      type: object
      properties:
        watch_start:
          $ref: '#/components/schemas/DateString'
        watch_end:
          $ref: '#/components/schemas/DateString'
        watch_season:
          type: integer
          default: 0
        watch_episode:
          type: integer
          default: 0
        myScore:
          type: integer
        watchlist_groupName:
          type: string

    UserStats_staff:
      type: object
      properties:
        likes_count:
          type: integer
        dislikes_count:
          type: integer
        follow_count:
          type: integer
        like:
          type: boolean
          default: false
        dislike:
          type: boolean
          default: false
        follow:
          type: boolean
          default: false

    UserStats_character:
      type: object
      properties:
        likes_count:
          type: integer
        dislikes_count:
          type: integer
        favorite_count:
          type: integer
        like:
          type: boolean
          default: false
        dislike:
          type: boolean
          default: false
        favorite:
          type: boolean
          default: false

    Staff:
      type: object
      properties:
        name:
          type: string
        rawName:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        about:
          type: string
        tvmazePersonID:
          type: integer
        jikanPersonID:
          type: integer
        country:
          type: string
        birthday:
          type: string
        deathday:
          type: string
        age:
          type: integer
        height:
          type: string
        weight:
          type: string
        hairColor:
          type: string
        eyeColor:
          type: string
        imageData:
          type: object
          properties:
            url:
              type: string
            originalUrl:
              type: string
            originalSize:
              type: string
            size:
              type: integer
            vpnStatus:
              $ref: '#/components/schemas/VpnStatus'
            thumbnail:
              type: string
            blurHash:
              type: string
        originalImages:
          $ref: '#/components/schemas/StringArray'
        credits:
          type: array
          items:
            $ref: '#/components/schemas/Credit'
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        userStats:
          $ref: '#/components/schemas/UserStats_staff'

    Character:
      type: object
      properties:
        name:
          type: string
        rawName:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        about:
          type: string
        tvmazePersonID:
          type: integer
        jikanPersonID:
          type: integer
        country:
          type: string
        birthday:
          type: string
        deathday:
          type: string
        age:
          type: integer
        height:
          type: string
        weight:
          type: string
        hairColor:
          type: string
        eyeColor:
          type: string
        imageData:
          type: object
          properties:
            url:
              type: string
            originalUrl:
              type: string
            originalSize:
              type: string
            size:
              type: integer
            vpnStatus:
              $ref: '#/components/schemas/VpnStatus'
            thumbnail:
              type: string
            blurHash:
              type: string
        originalImages:
          $ref: '#/components/schemas/StringArray'
        credits:
          type: array
          items:
            $ref: '#/components/schemas/Credit'
        insert_date:
          $ref: '#/components/schemas/DateString'
        update_date:
          $ref: '#/components/schemas/DateString'
        userStats:
          $ref: '#/components/schemas/UserStats_character'

    Credit:
      type: object
      properties:
        id:
          type: integer
        actorPositions:
          $ref: '#/components/schemas/StringArray'
        characterRole:
          type: string
        staff:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            gender:
              type: string
              enum: [ 'Male', 'Female' ]
            country:
              type: string
            imageData:
              type: object
              properties:
                size:
                  type: integer
                thumbnail:
                  type: string
                blurHash:
                  type: string
                url:
                  type: string
                vpnStatus:
                  $ref: '#/components/schemas/VpnStatus'
        character:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            gender:
              type: string
              enum: [ 'Male', 'Female', 'Sexless' ]
            imageData:
              type: object
              properties:
                size:
                  type: integer
                thumbnail:
                  type: string
                blurHash:
                  type: string
                url:
                  type: string
                vpnStatus:
                  $ref: '#/components/schemas/VpnStatus'
        movie:
          type: object
          properties:
            id:
              type: string
            rawTitle:
              type: string
            type:
              type: string
            posters:
              type: array
              items:
                $ref: '#/components/schemas/Poster'

    Genres:
      type: array
      items:
        type: object
        properties:
          genre:
            type: string
          poster:
            $ref: '#/components/schemas/Poster'
          count:
            type: integer

    MovieSources:
      type: array
      items:
        type: object
        properties:
          sourceName:
            type: string
          url:
            type: string
          isTorrent:
            type: boolean

    MovieSource:
      type: object
      properties:
        movie_url:
          type: string
        serial_url:
          type: string
          required: false
        lastCrawlDate:
          type: string
          format: date
        crawlCycle:
          type: integer
        cookies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
              expire:
                type: integer
        disabled:
          type: boolean
        isManualDisable:
          type: boolean
        disabledDate:
          $ref: '#/components/schemas/DateString'
        addDate:
          $ref: '#/components/schemas/DateString'
        lastDomainChangeDate:
          $ref: '#/components/schemas/DateString'
        lastConfigUpdateDate:
          $ref: '#/components/schemas/DateString'
        userData:
          type: object
          properties:
            userId:
              type: integer
            rawUsername:
              type: string
        description:
          type: string
        status:
          type: object
          properties:
            notRespondingFrom:
              $ref: '#/components/schemas/DateString'
            lastCheck:
              $ref: '#/components/schemas/DateString'

    DbConfigs:
      type: object
      properties:
        corsAllowedOrigins:
          type: array
          items:
            type: string
        disableTestUserRequests:
          type: boolean
          default: false
        disableCrawlerForDuration:
          type: integer
          default: 0
        disableCrawlerStart:
          type: string
          format: date
          default: 0
        crawlerDisabled:
          type: boolean
          default: false
        disableCrawler:
          type: boolean
          default: false
        developmentFaze:
          type: boolean
          default: false
        developmentFazeStart:
          type: string
          format: date
          default: 0
        mediaFileSizeLimit:
          type: integer
          default: 100
          description: its in mb
        profileFileSizeLimit:
          type: integer
          default: 2
          description: its in mb
        profileImageCountLimit:
          type: integer
          default: 5
        mediaFileExtensionLimit:
          type: string
          default: jpg, jpeg, png, webp, mp4, avi, flv, m4v, mkv, mov, mpeg, wmv
        profileImageExtensionLimit:
          type: string
          default: jpg, jpeg, png, webp
        torrentDownloadMaxFileSize:
          type: integer
          default: 800
        disableBotsNotifications:
          type: boolean
          default: false

    Season:
      type: object
      properties:
        seasonNumber:
          type: integer
        episodes:
          type: array
          items:
            type: object
            properties:
              episodeNumber:
                type: integer
              title:
                type: string
              released:
                type: string
              releaseStamp:
                type: string
              duration:
                type: string
              imdbRating:
                type: string
              imdbID:
                type: string
              links:
                type: array
                items:
                  type: object
                  properties:
                    link:
                      type: string
                    info:
                      type: string
                    qualitySample:
                      type: string
                    sourceName:
                      type: string
                    season:
                      type: integer
                    episode:
                      type: integer
              watchOnlineLinks:
                type: array
                items:
                  type: object
                  properties:
                    link:
                      type: string
                    info:
                      type: string
                    sourceName:
                      type: string
                    season:
                      type: integer
                    episode:
                      type: integer
              torrentLinks:
                type: array
                items:
                  type: object
                  properties:
                    link:
                      type: string
                    info:
                      type: string
                    season:
                      type: integer
                    episode:
                      type: integer
                    sourceName:
                      type: string
                    type:
                      type: string
                    size:
                      type: integer
                    localLink:
                      type: string
                    localLinkExpire:
                      type: integer
                    okCount:
                      type: integer
                    badCount:
                      type: integer

    Quality:
      type: object
      properties:
        quality:
          type: string
        links:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
              qualitySample:
                type: string
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer
        watchOnlineLinks:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer
        torrentLinks:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
              season:
                type: integer
              episode:
                type: integer
              sourceName:
                type: string
              type:
                type: string
              size:
                type: integer
              localLink:
                type: string
              localLinkExpire:
                type: integer
              okCount:
                type: integer
              badCount:
                type: integer

    Subtitle:
      type: object
      properties:
        seasonNumber:
          type: integer
        links:
          type: array
          items:
            type: object
            properties:
              link:
                type: string
              info:
                type: string
                description: Episodes(\d\d-\d\d) or AllEpisodesOf(Season \d\d)
              sourceName:
                type: string
              season:
                type: integer
              episode:
                type: integer
              direct:
                type: boolean

    Poster:
      type: object
      properties:
        url:
          type: string
        info:
          type: string
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'
        thumbnail:
          type: string
        blurHash:
          type: string

    Poster_s3:
      type: object
      properties:
        url:
          type: string
        originalUrl:
          type: string
        originalSize:
          type: integer
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'
        thumbnail:
          type: string
        blurHash:
          type: string

    Poster_wide_s3:
      type: object
      properties:
        url:
          type: string
        originalUrl:
          type: string
        originalSize:
          type: integer
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'
        thumbnail:
          type: string
        blurHash:
          type: string

    Trailer:
      type: object
      properties:
        url:
          type: string
        info:
          type: string
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'

    Trailer_s3:
      type: object
      properties:
        url:
          type: string
        originalUrl:
          type: string
        size:
          type: integer
        vpnStatus:
          $ref: '#/components/schemas/VpnStatus'

    Rating:
      type: object
      properties:
        imdb:
          type: integer
        rottenTomatoes:
          type: integer
        metacritic:
          type: integer
        myAnimeList:
          type: integer

    Rank:
      type: object
      properties:
        animeTopComingSoon:
          type: integer
        animeTopAiring:
          type: integer
        animeSeasonNow:
          type: integer
        animeSeasonUpcoming:
          type: integer
        comingSoon:
          type: integer
        inTheaters:
          type: integer
        boxOffice:
          type: integer
        like:
          type: integer
        like_month:
          type: integer
        follow_month:
          type: integer
        view_month:
          type: integer

    NextEpisode:
      type: object
      properties:
        title:
          type: string
        season:
          type: integer
        episode:
          type: integer
        releaseStamp:
          type: string
        summary:
          type: string

    Summary:
      type: object
      properties:
        english:
          type: string
        english_source:
          type: string
        persian:
          type: string
        persian_source:
          type: string

    Gender:
      type: string
      enum: [ '', 'male', 'female', 'sexless' ]

    VpnStatus:
      type: string
      enum: [ 'vpnOnly', 'noVpn', 'allOK' ]

    Session:
      type: object
      properties:
        appName:
          type: string
        appVersion:
          type: string
        deviceOs:
          type: string
        deviceModel:
          type: string
        ipLocation:
          type: string
        deviceId:
          type: string
          description: unique
        loginDate:
          $ref: '#/components/schemas/DateString'
        lastUseDate:
          $ref: '#/components/schemas/DateString'

    DeviceInfo:
      type: object
      properties:
        appName:
          type: string
          required: true
          example: downloader_app
        appVersion:
          type: string
          required: true
          format: \d\d?\.\d\d?\.\d\d?
          example: 1.0.2
        os:
          type: string
          required: true
          example: IOS
        deviceModel:
          type: string
          required: true
          example: Samsung Galaxy A52

    DateString:
      type: string
      format: date

    StringArray:
      type: array
      items:
        type: string

    ResponseCode:
      type: object
      properties:
        code:
          type: integer
          default: 200
        errorMessage:
          type: string
        isGuest:
          type: boolean
          default: false
        isCacheData:
          type: boolean
          default: false

    AppData:
      type: object
      properties:
        appName:
          type: string
        os:
          type: string
        latestVersion:
          type: string
          pattern: \d\d?\.\d\d?\.\d\d?
        latestVersionName:
          type: string
        minVersion:
          type: string
          pattern: \d\d?\.\d\d?\.\d\d?
        versions:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
                pattern: \d\d?\.\d\d?\.\d\d?
              versionName:
                type: string
              fileData:
                type: object
                properties:
                  url:
                    type: string
                  size:
                    type: integer
                  sha256checksum:
                    type: string

    CheckUpdateData:
      type: object
      properties:
        data:
          type: object
          properties:
            hasUpdate:
              type: boolean
            isForceUpdate:
              type: boolean
            minVersion:
              type: string
              pattern: \d\d?\.\d\d?\.\d\d?
            version:
              type: string
              pattern: \d\d?\.\d\d?\.\d\d?
            versionName:
              type: string
            fileData:
              type: object
              properties:
                url:
                  type: string
                size:
                  type: integer
                sha256checksum:
                  type: string
            addDate:
              $ref: '#/components/schemas/DateString'
            message:
              type: string

    SignUpResult:
      type: object
      properties:
        accessToken:
          type: string
        accessToken_expire:
          type: integer
        username:
          type: string
        userId:
          type: integer

    BotData:
      type: object
      properties:
        botName:
          type: string
        botToken:
          type: string
        botType:
          type: string
        botId:
          type: string
        addDate:
          $ref: '#/components/schemas/DateString'
        lastUseDate:
          $ref: '#/components/schemas/DateString'
        lastApiCall_news:
          $ref: '#/components/schemas/DateString'
        lastApiCall_updates:
          $ref: '#/components/schemas/DateString'
        lastConfigUpdateDate:
          $ref: '#/components/schemas/DateString'
        disabled:
          type: boolean
        disabledDate:
          $ref: '#/components/schemas/DateString'
        userData:
          type: object
          properties:
            userId:
              type: integer
            rawUsername:
              type: string
        description:
          type: string
        isOfficial:
          type: boolean
        permissionToLogin:
          type: boolean
        permissionToCrawl:
          type: boolean
        permissionToTorrentLeech:
          type: boolean
        permissionToTorrentSearch:
          type: boolean

    Role:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        torrentLeachLimitGb:
          type: number
        torrentSearchLimit:
          type: number
        botsNotification:
          type: boolean
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'

    Permission:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
