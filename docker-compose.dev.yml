version: '3.4'

services:
  api:
    image: downloader-api
    depends_on:
      - redis
      - mailServer
#      - remoteBrowser
    network_mode: host
    build:
      context: .
      dockerfile: ./Dockerfile
      network: host
    env_file: ./.env
    volumes:
      - .:/usr/app
      - ./db-backups:/db-backups
      - /usr/app/node_modules
    environment:
      NODE_ENV: production
      REDIS_URL: redis://127.0.0.1:6379
      _REMOTE_BROWSER_ENDPOINT1: http://localhost:5000
      _REMOTE_BROWSER_TABS_COUNT1: 2
      DISABLE_CRAWLER: 'true'
      CRAWLER_CONCURRENCY: 13
      PAUSE_CRAWLER_ON_HIGH_LOAD: 'true'
      CRAWLER_TOTAL_MEMORY: 900
      CRAWLER_PAUSE_DURATION_LIMIT: 10
      TOTAL_DISK_SPACE: 1024
      CORS_ALLOWED_ORIGINS: http://localhost --- http://admin.localhost --- http://api.localhost --- http://chat.localhost
    #    ports:
    #      - "3000:3000"
    deploy:
      resources:
        #also check --max_old_space_size in Dockerfile
        limits:
          cpus: "0.6"
          memory: 900M
        reservations:
          memory: 50M
    restart: always
    healthcheck:
      test: [ "CMD", "node", "healthcheck.js" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: "redis:7.2.3-alpine"
    network_mode: host
    env_file: ./.env
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - USE_OPTIMIZATION=true
    #    ports:
    #      - "6379:6379"
    volumes:
      - redis:/data
    entrypoint: /bin/sh -c "redis-server --latency-monitor-threshold 100 --maxmemory 80mb --maxmemory-policy allkeys-lfu --save 60 1 --appendonly yes --requirepass $$REDIS_PASSWORD"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 90M
        reservations:
          memory: 10M
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1m30s
      timeout: 5s
      retries: 3
      start_period: 20s

#  remoteBrowser:
#    image: ashkanaz2828/downloader_remotebrowser
#    network_mode: host
#    env_file: ./remotebrowser.env
#    environment:
#      - NODE_ENV=production
#      - CRAWLER_BROWSER_TAB_COUNT=2
#      - TOTAL_MEMORY_AMOUNT=600
#      - TOTAL_DISK_SPACE=2000
#      - SERVER_NAME=remoteBrowser-vps-1
#      - PRINT_ERRORS=true
#      - CRAWLER_PAUSE_DURATION_LIMIT=30
#      - DISABLE_UPLOAD_JOB=false
#      - BLACKHOLE_FILE_SIZE_LIMIT=768
#    deploy:
#      resources:
#        limits:
#          cpus: "0.5"
#          memory: 500M
#        reservations:
#          memory: 50M
#    #    volumes:
#    #      - ./:/usr/app
#    #    ports:
#    #      - "5000:5000"
#    restart: always

#  telegrambot:
#    image: ashkanaz2828/downloader_telegrambot
#    network_mode: host
#    depends_on:
#      - api
#    env_file: ./telegrambot.env
#    environment:
#      - API_URL=http://localhost:3000
#      - WEB_URL=http://localhost
#    volumes:
#      - telegrambot
#    deploy:
#      resources:
#        limits:
#          cpus: "0.2"
#          memory: 100M
#        reservations:
#          memory: 10M
#    restart: always

  adminpanel:
    image: ashkanaz2828/downloader_adminpanel
    network_mode: host
    depends_on:
      - api
    environment:
      - REACT_APP_BASE_URL=http://api.localhost
    #    ports:
    #      - "7070:7070"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 100M
        reservations:
          memory: 10M
    restart: unless-stopped

  website:
    image: ashkanaz2828/downloader_website
    network_mode: host
    depends_on:
      - api
    environment:
      - REACT_APP_BASE_URL=http://api.localhost
    #    ports:
    #      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 100M
        reservations:
          memory: 10M
    restart: unless-stopped

  nginx:
    network_mode: host
    build: ./nginx
    #    ports:
    #      - '80:80'
    depends_on:
#      - telegrambot
      - adminpanel
      - website
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 100M
        reservations:
          memory: 10M

  chat:
    image: ashkanaz2828/downloader_gochat
    depends_on:
      - rabbitmq
    network_mode: host
    env_file: ./chatservice.env
    environment:
      PORT: 3002
      MAIN_SERVER_ADDRESS: api.movieTracker.mom
      CORS_ALLOWED_ORIGINS: https://www.movietracker.mom --- https://movietracker.mom --- http://movietracker.mom --- https://admin.movietracker.mom --- http://admin.movietracker.mom --- https://chat.movietracker.mom
      LOG_PANIC_TRACE: 'true'
    #    ports:
    #      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: 150M
        reservations:
          memory: 20M
    restart: always

  rabbitmq:
    image: rabbitmq
    network_mode: host
    container_name: my-rabbitmq
    build:
      context: ./docker/rabbitmq
      dockerfile: ./Dockerfile
      network: host
    env_file: ./chatservice.env
    environment:
      - PORT=5672
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_ERLANG_COOKIE=unique-erlang-cookie
    #    ports:
    #      - "5672:5672"
    #      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 250M
        reservations:
          memory: 150M
    restart: always

  postgresDb:
    image: postgres:16.0-alpine3.18
    env_file: ./.env
    network_mode: host
#    network_mode: host
    container_name: downloader_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=downloader
    #    ports:
    #      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_min_messages=log"]
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: 400M
        reservations:
          memory: 50M
    #    healthcheck:
    #      test: ["CMD-SHELL", "pg_isready -U postgres"]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 10
    restart: always

volumes:
  redis:
    driver: local
  rabbitmq:
    driver: local
  telegrambot:
    driver: local
  pgdata:
    driver: local